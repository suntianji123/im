// Code generated by ent, DO NOT EDIT.

package immsg

import (
	"entgo.io/ent/dialect/sql"
	"github.com/im/common/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldID, id))
}

// Sid applies equality check predicate on the "sid" field. It's identical to SidEQ.
func Sid(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldSid, v))
}

// FromUID applies equality check predicate on the "from_uid" field. It's identical to FromUIDEQ.
func FromUID(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldFromUID, v))
}

// FromAppid applies equality check predicate on the "from_appid" field. It's identical to FromAppidEQ.
func FromAppid(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldFromAppid, v))
}

// ToUID applies equality check predicate on the "to_uid" field. It's identical to ToUIDEQ.
func ToUID(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldToUID, v))
}

// ToAppid applies equality check predicate on the "to_appid" field. It's identical to ToAppidEQ.
func ToAppid(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldToAppid, v))
}

// Channel applies equality check predicate on the "channel" field. It's identical to ChannelEQ.
func Channel(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldChannel, v))
}

// MsgID applies equality check predicate on the "msg_id" field. It's identical to MsgIDEQ.
func MsgID(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldMsgID, v))
}

// Cts applies equality check predicate on the "cts" field. It's identical to CtsEQ.
func Cts(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldCts, v))
}

// SidEQ applies the EQ predicate on the "sid" field.
func SidEQ(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldSid, v))
}

// SidNEQ applies the NEQ predicate on the "sid" field.
func SidNEQ(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldSid, v))
}

// SidIn applies the In predicate on the "sid" field.
func SidIn(vs ...string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldSid, vs...))
}

// SidNotIn applies the NotIn predicate on the "sid" field.
func SidNotIn(vs ...string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldSid, vs...))
}

// SidGT applies the GT predicate on the "sid" field.
func SidGT(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldSid, v))
}

// SidGTE applies the GTE predicate on the "sid" field.
func SidGTE(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldSid, v))
}

// SidLT applies the LT predicate on the "sid" field.
func SidLT(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldSid, v))
}

// SidLTE applies the LTE predicate on the "sid" field.
func SidLTE(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldSid, v))
}

// SidContains applies the Contains predicate on the "sid" field.
func SidContains(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldContains(FieldSid, v))
}

// SidHasPrefix applies the HasPrefix predicate on the "sid" field.
func SidHasPrefix(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldHasPrefix(FieldSid, v))
}

// SidHasSuffix applies the HasSuffix predicate on the "sid" field.
func SidHasSuffix(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldHasSuffix(FieldSid, v))
}

// SidEqualFold applies the EqualFold predicate on the "sid" field.
func SidEqualFold(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEqualFold(FieldSid, v))
}

// SidContainsFold applies the ContainsFold predicate on the "sid" field.
func SidContainsFold(v string) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldContainsFold(FieldSid, v))
}

// FromUIDEQ applies the EQ predicate on the "from_uid" field.
func FromUIDEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldFromUID, v))
}

// FromUIDNEQ applies the NEQ predicate on the "from_uid" field.
func FromUIDNEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldFromUID, v))
}

// FromUIDIn applies the In predicate on the "from_uid" field.
func FromUIDIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldFromUID, vs...))
}

// FromUIDNotIn applies the NotIn predicate on the "from_uid" field.
func FromUIDNotIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldFromUID, vs...))
}

// FromUIDGT applies the GT predicate on the "from_uid" field.
func FromUIDGT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldFromUID, v))
}

// FromUIDGTE applies the GTE predicate on the "from_uid" field.
func FromUIDGTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldFromUID, v))
}

// FromUIDLT applies the LT predicate on the "from_uid" field.
func FromUIDLT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldFromUID, v))
}

// FromUIDLTE applies the LTE predicate on the "from_uid" field.
func FromUIDLTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldFromUID, v))
}

// FromAppidEQ applies the EQ predicate on the "from_appid" field.
func FromAppidEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldFromAppid, v))
}

// FromAppidNEQ applies the NEQ predicate on the "from_appid" field.
func FromAppidNEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldFromAppid, v))
}

// FromAppidIn applies the In predicate on the "from_appid" field.
func FromAppidIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldFromAppid, vs...))
}

// FromAppidNotIn applies the NotIn predicate on the "from_appid" field.
func FromAppidNotIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldFromAppid, vs...))
}

// FromAppidGT applies the GT predicate on the "from_appid" field.
func FromAppidGT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldFromAppid, v))
}

// FromAppidGTE applies the GTE predicate on the "from_appid" field.
func FromAppidGTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldFromAppid, v))
}

// FromAppidLT applies the LT predicate on the "from_appid" field.
func FromAppidLT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldFromAppid, v))
}

// FromAppidLTE applies the LTE predicate on the "from_appid" field.
func FromAppidLTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldFromAppid, v))
}

// ToUIDEQ applies the EQ predicate on the "to_uid" field.
func ToUIDEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldToUID, v))
}

// ToUIDNEQ applies the NEQ predicate on the "to_uid" field.
func ToUIDNEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldToUID, v))
}

// ToUIDIn applies the In predicate on the "to_uid" field.
func ToUIDIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldToUID, vs...))
}

// ToUIDNotIn applies the NotIn predicate on the "to_uid" field.
func ToUIDNotIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldToUID, vs...))
}

// ToUIDGT applies the GT predicate on the "to_uid" field.
func ToUIDGT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldToUID, v))
}

// ToUIDGTE applies the GTE predicate on the "to_uid" field.
func ToUIDGTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldToUID, v))
}

// ToUIDLT applies the LT predicate on the "to_uid" field.
func ToUIDLT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldToUID, v))
}

// ToUIDLTE applies the LTE predicate on the "to_uid" field.
func ToUIDLTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldToUID, v))
}

// ToAppidEQ applies the EQ predicate on the "to_appid" field.
func ToAppidEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldToAppid, v))
}

// ToAppidNEQ applies the NEQ predicate on the "to_appid" field.
func ToAppidNEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldToAppid, v))
}

// ToAppidIn applies the In predicate on the "to_appid" field.
func ToAppidIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldToAppid, vs...))
}

// ToAppidNotIn applies the NotIn predicate on the "to_appid" field.
func ToAppidNotIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldToAppid, vs...))
}

// ToAppidGT applies the GT predicate on the "to_appid" field.
func ToAppidGT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldToAppid, v))
}

// ToAppidGTE applies the GTE predicate on the "to_appid" field.
func ToAppidGTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldToAppid, v))
}

// ToAppidLT applies the LT predicate on the "to_appid" field.
func ToAppidLT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldToAppid, v))
}

// ToAppidLTE applies the LTE predicate on the "to_appid" field.
func ToAppidLTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldToAppid, v))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldChannel, vs...))
}

// ChannelGT applies the GT predicate on the "channel" field.
func ChannelGT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldChannel, v))
}

// ChannelGTE applies the GTE predicate on the "channel" field.
func ChannelGTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldChannel, v))
}

// ChannelLT applies the LT predicate on the "channel" field.
func ChannelLT(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldChannel, v))
}

// ChannelLTE applies the LTE predicate on the "channel" field.
func ChannelLTE(v int) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldChannel, v))
}

// MsgIDEQ applies the EQ predicate on the "msg_id" field.
func MsgIDEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldMsgID, v))
}

// MsgIDNEQ applies the NEQ predicate on the "msg_id" field.
func MsgIDNEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldMsgID, v))
}

// MsgIDIn applies the In predicate on the "msg_id" field.
func MsgIDIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldMsgID, vs...))
}

// MsgIDNotIn applies the NotIn predicate on the "msg_id" field.
func MsgIDNotIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldMsgID, vs...))
}

// MsgIDGT applies the GT predicate on the "msg_id" field.
func MsgIDGT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldMsgID, v))
}

// MsgIDGTE applies the GTE predicate on the "msg_id" field.
func MsgIDGTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldMsgID, v))
}

// MsgIDLT applies the LT predicate on the "msg_id" field.
func MsgIDLT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldMsgID, v))
}

// MsgIDLTE applies the LTE predicate on the "msg_id" field.
func MsgIDLTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldMsgID, v))
}

// CtsEQ applies the EQ predicate on the "cts" field.
func CtsEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldEQ(FieldCts, v))
}

// CtsNEQ applies the NEQ predicate on the "cts" field.
func CtsNEQ(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNEQ(FieldCts, v))
}

// CtsIn applies the In predicate on the "cts" field.
func CtsIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldIn(FieldCts, vs...))
}

// CtsNotIn applies the NotIn predicate on the "cts" field.
func CtsNotIn(vs ...int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldNotIn(FieldCts, vs...))
}

// CtsGT applies the GT predicate on the "cts" field.
func CtsGT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGT(FieldCts, v))
}

// CtsGTE applies the GTE predicate on the "cts" field.
func CtsGTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldGTE(FieldCts, v))
}

// CtsLT applies the LT predicate on the "cts" field.
func CtsLT(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLT(FieldCts, v))
}

// CtsLTE applies the LTE predicate on the "cts" field.
func CtsLTE(v int64) predicate.IMMsg {
	return predicate.IMMsg(sql.FieldLTE(FieldCts, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.IMMsg) predicate.IMMsg {
	return predicate.IMMsg(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.IMMsg) predicate.IMMsg {
	return predicate.IMMsg(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.IMMsg) predicate.IMMsg {
	return predicate.IMMsg(sql.NotPredicates(p))
}
