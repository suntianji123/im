// Code generated by ent, DO NOT EDIT.

package msgbody

import (
	"entgo.io/ent/dialect/sql"
	"github.com/im/common/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLTE(FieldID, id))
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldBody, v))
}

// Cts applies equality check predicate on the "cts" field. It's identical to CtsEQ.
func Cts(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldCts, v))
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldBody, v))
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNEQ(FieldBody, v))
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldIn(FieldBody, vs...))
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNotIn(FieldBody, vs...))
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGT(FieldBody, v))
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGTE(FieldBody, v))
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLT(FieldBody, v))
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLTE(FieldBody, v))
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldContains(FieldBody, v))
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldHasPrefix(FieldBody, v))
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldHasSuffix(FieldBody, v))
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEqualFold(FieldBody, v))
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldContainsFold(FieldBody, v))
}

// CtsEQ applies the EQ predicate on the "cts" field.
func CtsEQ(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldEQ(FieldCts, v))
}

// CtsNEQ applies the NEQ predicate on the "cts" field.
func CtsNEQ(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNEQ(FieldCts, v))
}

// CtsIn applies the In predicate on the "cts" field.
func CtsIn(vs ...int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldIn(FieldCts, vs...))
}

// CtsNotIn applies the NotIn predicate on the "cts" field.
func CtsNotIn(vs ...int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldNotIn(FieldCts, vs...))
}

// CtsGT applies the GT predicate on the "cts" field.
func CtsGT(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGT(FieldCts, v))
}

// CtsGTE applies the GTE predicate on the "cts" field.
func CtsGTE(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldGTE(FieldCts, v))
}

// CtsLT applies the LT predicate on the "cts" field.
func CtsLT(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLT(FieldCts, v))
}

// CtsLTE applies the LTE predicate on the "cts" field.
func CtsLTE(v int64) predicate.MsgBody {
	return predicate.MsgBody(sql.FieldLTE(FieldCts, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.MsgBody) predicate.MsgBody {
	return predicate.MsgBody(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.MsgBody) predicate.MsgBody {
	return predicate.MsgBody(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.MsgBody) predicate.MsgBody {
	return predicate.MsgBody(sql.NotPredicates(p))
}
