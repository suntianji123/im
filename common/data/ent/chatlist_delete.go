// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/chatlist"
	"github.com/im/common/data/ent/predicate"
)

// ChatListDelete is the builder for deleting a ChatList entity.
type ChatListDelete struct {
	config
	hooks    []Hook
	mutation *ChatListMutation
}

// Where appends a list predicates to the ChatListDelete builder.
func (cld *ChatListDelete) Where(ps ...predicate.ChatList) *ChatListDelete {
	cld.mutation.Where(ps...)
	return cld
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (cld *ChatListDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, cld.sqlExec, cld.mutation, cld.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (cld *ChatListDelete) ExecX(ctx context.Context) int {
	n, err := cld.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (cld *ChatListDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(chatlist.Table, sqlgraph.NewFieldSpec(chatlist.FieldID, field.TypeInt64))
	if ps := cld.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, cld.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	cld.mutation.done = true
	return affected, err
}

// ChatListDeleteOne is the builder for deleting a single ChatList entity.
type ChatListDeleteOne struct {
	cld *ChatListDelete
}

// Where appends a list predicates to the ChatListDelete builder.
func (cldo *ChatListDeleteOne) Where(ps ...predicate.ChatList) *ChatListDeleteOne {
	cldo.cld.mutation.Where(ps...)
	return cldo
}

// Exec executes the deletion query.
func (cldo *ChatListDeleteOne) Exec(ctx context.Context) error {
	n, err := cldo.cld.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{chatlist.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (cldo *ChatListDeleteOne) ExecX(ctx context.Context) {
	if err := cldo.Exec(ctx); err != nil {
		panic(err)
	}
}
