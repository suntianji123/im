// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/immsg"
	"github.com/im/common/data/ent/predicate"
)

// IMMsgDelete is the builder for deleting a IMMsg entity.
type IMMsgDelete struct {
	config
	hooks    []Hook
	mutation *IMMsgMutation
}

// Where appends a list predicates to the IMMsgDelete builder.
func (imd *IMMsgDelete) Where(ps ...predicate.IMMsg) *IMMsgDelete {
	imd.mutation.Where(ps...)
	return imd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (imd *IMMsgDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, imd.sqlExec, imd.mutation, imd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (imd *IMMsgDelete) ExecX(ctx context.Context) int {
	n, err := imd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (imd *IMMsgDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(immsg.Table, sqlgraph.NewFieldSpec(immsg.FieldID, field.TypeInt64))
	if ps := imd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, imd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	imd.mutation.done = true
	return affected, err
}

// IMMsgDeleteOne is the builder for deleting a single IMMsg entity.
type IMMsgDeleteOne struct {
	imd *IMMsgDelete
}

// Where appends a list predicates to the IMMsgDelete builder.
func (imdo *IMMsgDeleteOne) Where(ps ...predicate.IMMsg) *IMMsgDeleteOne {
	imdo.imd.mutation.Where(ps...)
	return imdo
}

// Exec executes the deletion query.
func (imdo *IMMsgDeleteOne) Exec(ctx context.Context) error {
	n, err := imdo.imd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{immsg.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (imdo *IMMsgDeleteOne) ExecX(ctx context.Context) {
	if err := imdo.Exec(ctx); err != nil {
		panic(err)
	}
}
