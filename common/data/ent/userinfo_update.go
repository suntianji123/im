// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/predicate"
	"github.com/im/common/data/ent/userinfo"
)

// UserInfoUpdate is the builder for updating UserInfo entities.
type UserInfoUpdate struct {
	config
	hooks    []Hook
	mutation *UserInfoMutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiu *UserInfoUpdate) Where(ps ...predicate.UserInfo) *UserInfoUpdate {
	uiu.mutation.Where(ps...)
	return uiu
}

// SetUsername sets the "username" field.
func (uiu *UserInfoUpdate) SetUsername(s string) *UserInfoUpdate {
	uiu.mutation.SetUsername(s)
	return uiu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableUsername(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetUsername(*s)
	}
	return uiu
}

// SetPassword sets the "password" field.
func (uiu *UserInfoUpdate) SetPassword(s string) *UserInfoUpdate {
	uiu.mutation.SetPassword(s)
	return uiu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillablePassword(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetPassword(*s)
	}
	return uiu
}

// SetNickname sets the "nickname" field.
func (uiu *UserInfoUpdate) SetNickname(s string) *UserInfoUpdate {
	uiu.mutation.SetNickname(s)
	return uiu
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableNickname(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetNickname(*s)
	}
	return uiu
}

// SetAvatar sets the "avatar" field.
func (uiu *UserInfoUpdate) SetAvatar(s string) *UserInfoUpdate {
	uiu.mutation.SetAvatar(s)
	return uiu
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableAvatar(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetAvatar(*s)
	}
	return uiu
}

// ClearAvatar clears the value of the "avatar" field.
func (uiu *UserInfoUpdate) ClearAvatar() *UserInfoUpdate {
	uiu.mutation.ClearAvatar()
	return uiu
}

// SetStatus sets the "status" field.
func (uiu *UserInfoUpdate) SetStatus(i int) *UserInfoUpdate {
	uiu.mutation.ResetStatus()
	uiu.mutation.SetStatus(i)
	return uiu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableStatus(i *int) *UserInfoUpdate {
	if i != nil {
		uiu.SetStatus(*i)
	}
	return uiu
}

// AddStatus adds i to the "status" field.
func (uiu *UserInfoUpdate) AddStatus(i int) *UserInfoUpdate {
	uiu.mutation.AddStatus(i)
	return uiu
}

// SetExt sets the "ext" field.
func (uiu *UserInfoUpdate) SetExt(s string) *UserInfoUpdate {
	uiu.mutation.SetExt(s)
	return uiu
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (uiu *UserInfoUpdate) SetNillableExt(s *string) *UserInfoUpdate {
	if s != nil {
		uiu.SetExt(*s)
	}
	return uiu
}

// ClearExt clears the value of the "ext" field.
func (uiu *UserInfoUpdate) ClearExt() *UserInfoUpdate {
	uiu.mutation.ClearExt()
	return uiu
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiu *UserInfoUpdate) Mutation() *UserInfoMutation {
	return uiu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uiu *UserInfoUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, uiu.sqlSave, uiu.mutation, uiu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiu *UserInfoUpdate) SaveX(ctx context.Context) int {
	affected, err := uiu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uiu *UserInfoUpdate) Exec(ctx context.Context) error {
	_, err := uiu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiu *UserInfoUpdate) ExecX(ctx context.Context) {
	if err := uiu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiu *UserInfoUpdate) check() error {
	if v, ok := uiu.mutation.Username(); ok {
		if err := userinfo.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "UserInfo.username": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Password(); ok {
		if err := userinfo.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "UserInfo.password": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Nickname(); ok {
		if err := userinfo.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "UserInfo.nickname": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Avatar(); ok {
		if err := userinfo.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "UserInfo.avatar": %w`, err)}
		}
	}
	if v, ok := uiu.mutation.Ext(); ok {
		if err := userinfo.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "UserInfo.ext": %w`, err)}
		}
	}
	return nil
}

func (uiu *UserInfoUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uiu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt64))
	if ps := uiu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiu.mutation.Username(); ok {
		_spec.SetField(userinfo.FieldUsername, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Password(); ok {
		_spec.SetField(userinfo.FieldPassword, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Nickname(); ok {
		_spec.SetField(userinfo.FieldNickname, field.TypeString, value)
	}
	if value, ok := uiu.mutation.Avatar(); ok {
		_spec.SetField(userinfo.FieldAvatar, field.TypeString, value)
	}
	if uiu.mutation.AvatarCleared() {
		_spec.ClearField(userinfo.FieldAvatar, field.TypeString)
	}
	if value, ok := uiu.mutation.Status(); ok {
		_spec.SetField(userinfo.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.AddedStatus(); ok {
		_spec.AddField(userinfo.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uiu.mutation.Ext(); ok {
		_spec.SetField(userinfo.FieldExt, field.TypeString, value)
	}
	if uiu.mutation.ExtCleared() {
		_spec.ClearField(userinfo.FieldExt, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, uiu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uiu.mutation.done = true
	return n, nil
}

// UserInfoUpdateOne is the builder for updating a single UserInfo entity.
type UserInfoUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserInfoMutation
}

// SetUsername sets the "username" field.
func (uiuo *UserInfoUpdateOne) SetUsername(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetUsername(s)
	return uiuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableUsername(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetUsername(*s)
	}
	return uiuo
}

// SetPassword sets the "password" field.
func (uiuo *UserInfoUpdateOne) SetPassword(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetPassword(s)
	return uiuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillablePassword(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetPassword(*s)
	}
	return uiuo
}

// SetNickname sets the "nickname" field.
func (uiuo *UserInfoUpdateOne) SetNickname(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetNickname(s)
	return uiuo
}

// SetNillableNickname sets the "nickname" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableNickname(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetNickname(*s)
	}
	return uiuo
}

// SetAvatar sets the "avatar" field.
func (uiuo *UserInfoUpdateOne) SetAvatar(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetAvatar(s)
	return uiuo
}

// SetNillableAvatar sets the "avatar" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableAvatar(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetAvatar(*s)
	}
	return uiuo
}

// ClearAvatar clears the value of the "avatar" field.
func (uiuo *UserInfoUpdateOne) ClearAvatar() *UserInfoUpdateOne {
	uiuo.mutation.ClearAvatar()
	return uiuo
}

// SetStatus sets the "status" field.
func (uiuo *UserInfoUpdateOne) SetStatus(i int) *UserInfoUpdateOne {
	uiuo.mutation.ResetStatus()
	uiuo.mutation.SetStatus(i)
	return uiuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableStatus(i *int) *UserInfoUpdateOne {
	if i != nil {
		uiuo.SetStatus(*i)
	}
	return uiuo
}

// AddStatus adds i to the "status" field.
func (uiuo *UserInfoUpdateOne) AddStatus(i int) *UserInfoUpdateOne {
	uiuo.mutation.AddStatus(i)
	return uiuo
}

// SetExt sets the "ext" field.
func (uiuo *UserInfoUpdateOne) SetExt(s string) *UserInfoUpdateOne {
	uiuo.mutation.SetExt(s)
	return uiuo
}

// SetNillableExt sets the "ext" field if the given value is not nil.
func (uiuo *UserInfoUpdateOne) SetNillableExt(s *string) *UserInfoUpdateOne {
	if s != nil {
		uiuo.SetExt(*s)
	}
	return uiuo
}

// ClearExt clears the value of the "ext" field.
func (uiuo *UserInfoUpdateOne) ClearExt() *UserInfoUpdateOne {
	uiuo.mutation.ClearExt()
	return uiuo
}

// Mutation returns the UserInfoMutation object of the builder.
func (uiuo *UserInfoUpdateOne) Mutation() *UserInfoMutation {
	return uiuo.mutation
}

// Where appends a list predicates to the UserInfoUpdate builder.
func (uiuo *UserInfoUpdateOne) Where(ps ...predicate.UserInfo) *UserInfoUpdateOne {
	uiuo.mutation.Where(ps...)
	return uiuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uiuo *UserInfoUpdateOne) Select(field string, fields ...string) *UserInfoUpdateOne {
	uiuo.fields = append([]string{field}, fields...)
	return uiuo
}

// Save executes the query and returns the updated UserInfo entity.
func (uiuo *UserInfoUpdateOne) Save(ctx context.Context) (*UserInfo, error) {
	return withHooks(ctx, uiuo.sqlSave, uiuo.mutation, uiuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) SaveX(ctx context.Context) *UserInfo {
	node, err := uiuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uiuo *UserInfoUpdateOne) Exec(ctx context.Context) error {
	_, err := uiuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uiuo *UserInfoUpdateOne) ExecX(ctx context.Context) {
	if err := uiuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uiuo *UserInfoUpdateOne) check() error {
	if v, ok := uiuo.mutation.Username(); ok {
		if err := userinfo.UsernameValidator(v); err != nil {
			return &ValidationError{Name: "username", err: fmt.Errorf(`ent: validator failed for field "UserInfo.username": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Password(); ok {
		if err := userinfo.PasswordValidator(v); err != nil {
			return &ValidationError{Name: "password", err: fmt.Errorf(`ent: validator failed for field "UserInfo.password": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Nickname(); ok {
		if err := userinfo.NicknameValidator(v); err != nil {
			return &ValidationError{Name: "nickname", err: fmt.Errorf(`ent: validator failed for field "UserInfo.nickname": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Avatar(); ok {
		if err := userinfo.AvatarValidator(v); err != nil {
			return &ValidationError{Name: "avatar", err: fmt.Errorf(`ent: validator failed for field "UserInfo.avatar": %w`, err)}
		}
	}
	if v, ok := uiuo.mutation.Ext(); ok {
		if err := userinfo.ExtValidator(v); err != nil {
			return &ValidationError{Name: "ext", err: fmt.Errorf(`ent: validator failed for field "UserInfo.ext": %w`, err)}
		}
	}
	return nil
}

func (uiuo *UserInfoUpdateOne) sqlSave(ctx context.Context) (_node *UserInfo, err error) {
	if err := uiuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userinfo.Table, userinfo.Columns, sqlgraph.NewFieldSpec(userinfo.FieldID, field.TypeInt64))
	id, ok := uiuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserInfo.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uiuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userinfo.FieldID)
		for _, f := range fields {
			if !userinfo.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userinfo.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uiuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uiuo.mutation.Username(); ok {
		_spec.SetField(userinfo.FieldUsername, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Password(); ok {
		_spec.SetField(userinfo.FieldPassword, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Nickname(); ok {
		_spec.SetField(userinfo.FieldNickname, field.TypeString, value)
	}
	if value, ok := uiuo.mutation.Avatar(); ok {
		_spec.SetField(userinfo.FieldAvatar, field.TypeString, value)
	}
	if uiuo.mutation.AvatarCleared() {
		_spec.ClearField(userinfo.FieldAvatar, field.TypeString)
	}
	if value, ok := uiuo.mutation.Status(); ok {
		_spec.SetField(userinfo.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.AddedStatus(); ok {
		_spec.AddField(userinfo.FieldStatus, field.TypeInt, value)
	}
	if value, ok := uiuo.mutation.Ext(); ok {
		_spec.SetField(userinfo.FieldExt, field.TypeString, value)
	}
	if uiuo.mutation.ExtCleared() {
		_spec.ClearField(userinfo.FieldExt, field.TypeString)
	}
	_node = &UserInfo{config: uiuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uiuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userinfo.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uiuo.mutation.done = true
	return _node, nil
}
