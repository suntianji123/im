// Code generated by ent, DO NOT EDIT.

package userinfo

import (
	"entgo.io/ent/dialect/sql"
	"github.com/im/common/data/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldID, id))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldPassword, v))
}

// Nickname applies equality check predicate on the "nickname" field. It's identical to NicknameEQ.
func Nickname(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldNickname, v))
}

// Avatar applies equality check predicate on the "avatar" field. It's identical to AvatarEQ.
func Avatar(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldAvatar, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldStatus, v))
}

// Ext applies equality check predicate on the "ext" field. It's identical to ExtEQ.
func Ext(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldExt, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContainsFold(FieldPassword, v))
}

// NicknameEQ applies the EQ predicate on the "nickname" field.
func NicknameEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldNickname, v))
}

// NicknameNEQ applies the NEQ predicate on the "nickname" field.
func NicknameNEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldNickname, v))
}

// NicknameIn applies the In predicate on the "nickname" field.
func NicknameIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldNickname, vs...))
}

// NicknameNotIn applies the NotIn predicate on the "nickname" field.
func NicknameNotIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldNickname, vs...))
}

// NicknameGT applies the GT predicate on the "nickname" field.
func NicknameGT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldNickname, v))
}

// NicknameGTE applies the GTE predicate on the "nickname" field.
func NicknameGTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldNickname, v))
}

// NicknameLT applies the LT predicate on the "nickname" field.
func NicknameLT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldNickname, v))
}

// NicknameLTE applies the LTE predicate on the "nickname" field.
func NicknameLTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldNickname, v))
}

// NicknameContains applies the Contains predicate on the "nickname" field.
func NicknameContains(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContains(FieldNickname, v))
}

// NicknameHasPrefix applies the HasPrefix predicate on the "nickname" field.
func NicknameHasPrefix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasPrefix(FieldNickname, v))
}

// NicknameHasSuffix applies the HasSuffix predicate on the "nickname" field.
func NicknameHasSuffix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasSuffix(FieldNickname, v))
}

// NicknameEqualFold applies the EqualFold predicate on the "nickname" field.
func NicknameEqualFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEqualFold(FieldNickname, v))
}

// NicknameContainsFold applies the ContainsFold predicate on the "nickname" field.
func NicknameContainsFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContainsFold(FieldNickname, v))
}

// AvatarEQ applies the EQ predicate on the "avatar" field.
func AvatarEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldAvatar, v))
}

// AvatarNEQ applies the NEQ predicate on the "avatar" field.
func AvatarNEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldAvatar, v))
}

// AvatarIn applies the In predicate on the "avatar" field.
func AvatarIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldAvatar, vs...))
}

// AvatarNotIn applies the NotIn predicate on the "avatar" field.
func AvatarNotIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldAvatar, vs...))
}

// AvatarGT applies the GT predicate on the "avatar" field.
func AvatarGT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldAvatar, v))
}

// AvatarGTE applies the GTE predicate on the "avatar" field.
func AvatarGTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldAvatar, v))
}

// AvatarLT applies the LT predicate on the "avatar" field.
func AvatarLT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldAvatar, v))
}

// AvatarLTE applies the LTE predicate on the "avatar" field.
func AvatarLTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldAvatar, v))
}

// AvatarContains applies the Contains predicate on the "avatar" field.
func AvatarContains(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContains(FieldAvatar, v))
}

// AvatarHasPrefix applies the HasPrefix predicate on the "avatar" field.
func AvatarHasPrefix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasPrefix(FieldAvatar, v))
}

// AvatarHasSuffix applies the HasSuffix predicate on the "avatar" field.
func AvatarHasSuffix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasSuffix(FieldAvatar, v))
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIsNull(FieldAvatar))
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotNull(FieldAvatar))
}

// AvatarEqualFold applies the EqualFold predicate on the "avatar" field.
func AvatarEqualFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEqualFold(FieldAvatar, v))
}

// AvatarContainsFold applies the ContainsFold predicate on the "avatar" field.
func AvatarContainsFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContainsFold(FieldAvatar, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v int) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldStatus, v))
}

// ExtEQ applies the EQ predicate on the "ext" field.
func ExtEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEQ(FieldExt, v))
}

// ExtNEQ applies the NEQ predicate on the "ext" field.
func ExtNEQ(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNEQ(FieldExt, v))
}

// ExtIn applies the In predicate on the "ext" field.
func ExtIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIn(FieldExt, vs...))
}

// ExtNotIn applies the NotIn predicate on the "ext" field.
func ExtNotIn(vs ...string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotIn(FieldExt, vs...))
}

// ExtGT applies the GT predicate on the "ext" field.
func ExtGT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGT(FieldExt, v))
}

// ExtGTE applies the GTE predicate on the "ext" field.
func ExtGTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldGTE(FieldExt, v))
}

// ExtLT applies the LT predicate on the "ext" field.
func ExtLT(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLT(FieldExt, v))
}

// ExtLTE applies the LTE predicate on the "ext" field.
func ExtLTE(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldLTE(FieldExt, v))
}

// ExtContains applies the Contains predicate on the "ext" field.
func ExtContains(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContains(FieldExt, v))
}

// ExtHasPrefix applies the HasPrefix predicate on the "ext" field.
func ExtHasPrefix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasPrefix(FieldExt, v))
}

// ExtHasSuffix applies the HasSuffix predicate on the "ext" field.
func ExtHasSuffix(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldHasSuffix(FieldExt, v))
}

// ExtIsNil applies the IsNil predicate on the "ext" field.
func ExtIsNil() predicate.UserInfo {
	return predicate.UserInfo(sql.FieldIsNull(FieldExt))
}

// ExtNotNil applies the NotNil predicate on the "ext" field.
func ExtNotNil() predicate.UserInfo {
	return predicate.UserInfo(sql.FieldNotNull(FieldExt))
}

// ExtEqualFold applies the EqualFold predicate on the "ext" field.
func ExtEqualFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldEqualFold(FieldExt, v))
}

// ExtContainsFold applies the ContainsFold predicate on the "ext" field.
func ExtContainsFold(v string) predicate.UserInfo {
	return predicate.UserInfo(sql.FieldContainsFold(FieldExt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserInfo) predicate.UserInfo {
	return predicate.UserInfo(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserInfo) predicate.UserInfo {
	return predicate.UserInfo(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserInfo) predicate.UserInfo {
	return predicate.UserInfo(sql.NotPredicates(p))
}
