// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/msgbody"
	"github.com/im/common/data/ent/predicate"
)

// MsgBodyUpdate is the builder for updating MsgBody entities.
type MsgBodyUpdate struct {
	config
	hooks    []Hook
	mutation *MsgBodyMutation
}

// Where appends a list predicates to the MsgBodyUpdate builder.
func (mbu *MsgBodyUpdate) Where(ps ...predicate.MsgBody) *MsgBodyUpdate {
	mbu.mutation.Where(ps...)
	return mbu
}

// SetMsgID sets the "msg_id" field.
func (mbu *MsgBodyUpdate) SetMsgID(i int64) *MsgBodyUpdate {
	mbu.mutation.ResetMsgID()
	mbu.mutation.SetMsgID(i)
	return mbu
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (mbu *MsgBodyUpdate) SetNillableMsgID(i *int64) *MsgBodyUpdate {
	if i != nil {
		mbu.SetMsgID(*i)
	}
	return mbu
}

// AddMsgID adds i to the "msg_id" field.
func (mbu *MsgBodyUpdate) AddMsgID(i int64) *MsgBodyUpdate {
	mbu.mutation.AddMsgID(i)
	return mbu
}

// SetBody sets the "body" field.
func (mbu *MsgBodyUpdate) SetBody(s string) *MsgBodyUpdate {
	mbu.mutation.SetBody(s)
	return mbu
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mbu *MsgBodyUpdate) SetNillableBody(s *string) *MsgBodyUpdate {
	if s != nil {
		mbu.SetBody(*s)
	}
	return mbu
}

// SetCts sets the "cts" field.
func (mbu *MsgBodyUpdate) SetCts(i int64) *MsgBodyUpdate {
	mbu.mutation.ResetCts()
	mbu.mutation.SetCts(i)
	return mbu
}

// SetNillableCts sets the "cts" field if the given value is not nil.
func (mbu *MsgBodyUpdate) SetNillableCts(i *int64) *MsgBodyUpdate {
	if i != nil {
		mbu.SetCts(*i)
	}
	return mbu
}

// AddCts adds i to the "cts" field.
func (mbu *MsgBodyUpdate) AddCts(i int64) *MsgBodyUpdate {
	mbu.mutation.AddCts(i)
	return mbu
}

// Mutation returns the MsgBodyMutation object of the builder.
func (mbu *MsgBodyUpdate) Mutation() *MsgBodyMutation {
	return mbu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mbu *MsgBodyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mbu.sqlSave, mbu.mutation, mbu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mbu *MsgBodyUpdate) SaveX(ctx context.Context) int {
	affected, err := mbu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mbu *MsgBodyUpdate) Exec(ctx context.Context) error {
	_, err := mbu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbu *MsgBodyUpdate) ExecX(ctx context.Context) {
	if err := mbu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mbu *MsgBodyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(msgbody.Table, msgbody.Columns, sqlgraph.NewFieldSpec(msgbody.FieldID, field.TypeInt))
	if ps := mbu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mbu.mutation.MsgID(); ok {
		_spec.SetField(msgbody.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.AddedMsgID(); ok {
		_spec.AddField(msgbody.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.Body(); ok {
		_spec.SetField(msgbody.FieldBody, field.TypeString, value)
	}
	if value, ok := mbu.mutation.Cts(); ok {
		_spec.SetField(msgbody.FieldCts, field.TypeInt64, value)
	}
	if value, ok := mbu.mutation.AddedCts(); ok {
		_spec.AddField(msgbody.FieldCts, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, mbu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgbody.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mbu.mutation.done = true
	return n, nil
}

// MsgBodyUpdateOne is the builder for updating a single MsgBody entity.
type MsgBodyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *MsgBodyMutation
}

// SetMsgID sets the "msg_id" field.
func (mbuo *MsgBodyUpdateOne) SetMsgID(i int64) *MsgBodyUpdateOne {
	mbuo.mutation.ResetMsgID()
	mbuo.mutation.SetMsgID(i)
	return mbuo
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (mbuo *MsgBodyUpdateOne) SetNillableMsgID(i *int64) *MsgBodyUpdateOne {
	if i != nil {
		mbuo.SetMsgID(*i)
	}
	return mbuo
}

// AddMsgID adds i to the "msg_id" field.
func (mbuo *MsgBodyUpdateOne) AddMsgID(i int64) *MsgBodyUpdateOne {
	mbuo.mutation.AddMsgID(i)
	return mbuo
}

// SetBody sets the "body" field.
func (mbuo *MsgBodyUpdateOne) SetBody(s string) *MsgBodyUpdateOne {
	mbuo.mutation.SetBody(s)
	return mbuo
}

// SetNillableBody sets the "body" field if the given value is not nil.
func (mbuo *MsgBodyUpdateOne) SetNillableBody(s *string) *MsgBodyUpdateOne {
	if s != nil {
		mbuo.SetBody(*s)
	}
	return mbuo
}

// SetCts sets the "cts" field.
func (mbuo *MsgBodyUpdateOne) SetCts(i int64) *MsgBodyUpdateOne {
	mbuo.mutation.ResetCts()
	mbuo.mutation.SetCts(i)
	return mbuo
}

// SetNillableCts sets the "cts" field if the given value is not nil.
func (mbuo *MsgBodyUpdateOne) SetNillableCts(i *int64) *MsgBodyUpdateOne {
	if i != nil {
		mbuo.SetCts(*i)
	}
	return mbuo
}

// AddCts adds i to the "cts" field.
func (mbuo *MsgBodyUpdateOne) AddCts(i int64) *MsgBodyUpdateOne {
	mbuo.mutation.AddCts(i)
	return mbuo
}

// Mutation returns the MsgBodyMutation object of the builder.
func (mbuo *MsgBodyUpdateOne) Mutation() *MsgBodyMutation {
	return mbuo.mutation
}

// Where appends a list predicates to the MsgBodyUpdate builder.
func (mbuo *MsgBodyUpdateOne) Where(ps ...predicate.MsgBody) *MsgBodyUpdateOne {
	mbuo.mutation.Where(ps...)
	return mbuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (mbuo *MsgBodyUpdateOne) Select(field string, fields ...string) *MsgBodyUpdateOne {
	mbuo.fields = append([]string{field}, fields...)
	return mbuo
}

// Save executes the query and returns the updated MsgBody entity.
func (mbuo *MsgBodyUpdateOne) Save(ctx context.Context) (*MsgBody, error) {
	return withHooks(ctx, mbuo.sqlSave, mbuo.mutation, mbuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mbuo *MsgBodyUpdateOne) SaveX(ctx context.Context) *MsgBody {
	node, err := mbuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (mbuo *MsgBodyUpdateOne) Exec(ctx context.Context) error {
	_, err := mbuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbuo *MsgBodyUpdateOne) ExecX(ctx context.Context) {
	if err := mbuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (mbuo *MsgBodyUpdateOne) sqlSave(ctx context.Context) (_node *MsgBody, err error) {
	_spec := sqlgraph.NewUpdateSpec(msgbody.Table, msgbody.Columns, sqlgraph.NewFieldSpec(msgbody.FieldID, field.TypeInt))
	id, ok := mbuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MsgBody.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := mbuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, msgbody.FieldID)
		for _, f := range fields {
			if !msgbody.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != msgbody.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := mbuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mbuo.mutation.MsgID(); ok {
		_spec.SetField(msgbody.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.AddedMsgID(); ok {
		_spec.AddField(msgbody.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.Body(); ok {
		_spec.SetField(msgbody.FieldBody, field.TypeString, value)
	}
	if value, ok := mbuo.mutation.Cts(); ok {
		_spec.SetField(msgbody.FieldCts, field.TypeInt64, value)
	}
	if value, ok := mbuo.mutation.AddedCts(); ok {
		_spec.AddField(msgbody.FieldCts, field.TypeInt64, value)
	}
	_node = &MsgBody{config: mbuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, mbuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{msgbody.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	mbuo.mutation.done = true
	return _node, nil
}
