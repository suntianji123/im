// Code generated by protoc-gen-go-triple. DO NOT EDIT.
// versions:
// - protoc-gen-go-triple v1.0.8
// - protoc             v4.25.3
// source: auth_api.proto

package api

import (
	context "context"
	constant1 "dubbo.apache.org/dubbo-go/v3/common/constant"
	protocol "dubbo.apache.org/dubbo-go/v3/protocol"
	dubbo3 "dubbo.apache.org/dubbo-go/v3/protocol/dubbo3"
	invocation "dubbo.apache.org/dubbo-go/v3/protocol/invocation"
	fmt "fmt"
	grpc_go "github.com/dubbogo/grpc-go"
	codes "github.com/dubbogo/grpc-go/codes"
	metadata "github.com/dubbogo/grpc-go/metadata"
	status "github.com/dubbogo/grpc-go/status"
	constant "github.com/dubbogo/triple/pkg/common/constant"
	triple "github.com/dubbogo/triple/pkg/triple"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc_go.SupportPackageIsVersion7

// AuthServiceClient is the client API for AuthService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServiceClient interface {
	Auth(ctx context.Context, opts ...grpc_go.CallOption) (AuthService_AuthClient, error)
	CheckAuth(ctx context.Context, opts ...grpc_go.CallOption) (AuthService_CheckAuthClient, error)
}

type authServiceClient struct {
	cc *triple.TripleConn
}

type AuthServiceClientImpl struct {
	Auth      func(ctx context.Context) (AuthService_AuthClient, error)
	CheckAuth func(ctx context.Context) (AuthService_CheckAuthClient, error)
}

func (c *AuthServiceClientImpl) GetDubboStub(cc *triple.TripleConn) AuthServiceClient {
	return NewAuthServiceClient(cc)
}

func (c *AuthServiceClientImpl) XXX_InterfaceName() string {
	return "api.AuthService"
}

func NewAuthServiceClient(cc *triple.TripleConn) AuthServiceClient {
	return &authServiceClient{cc}
}

func (c *authServiceClient) Auth(ctx context.Context, opts ...grpc_go.CallOption) (AuthService_AuthClient, error) {
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	stream, err := c.cc.NewStream(ctx, "/"+interfaceKey+"/Auth", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceAuthClient{stream}
	return x, nil
}

type AuthService_AuthClient interface {
	Send(*AuthReq) error
	CloseAndRecv() (*Result, error)
	grpc_go.ClientStream
}

type authServiceAuthClient struct {
	grpc_go.ClientStream
}

func (x *authServiceAuthClient) Send(m *AuthReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceAuthClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *authServiceClient) CheckAuth(ctx context.Context, opts ...grpc_go.CallOption) (AuthService_CheckAuthClient, error) {
	interfaceKey := ctx.Value(constant.InterfaceKey).(string)
	stream, err := c.cc.NewStream(ctx, "/"+interfaceKey+"/CheckAuth", opts...)
	if err != nil {
		return nil, err
	}
	x := &authServiceCheckAuthClient{stream}
	return x, nil
}

type AuthService_CheckAuthClient interface {
	Send(*AuthCheckReq) error
	CloseAndRecv() (*Result, error)
	grpc_go.ClientStream
}

type authServiceCheckAuthClient struct {
	grpc_go.ClientStream
}

func (x *authServiceCheckAuthClient) Send(m *AuthCheckReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *authServiceCheckAuthClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthServiceServer is the server API for AuthService service.
// All implementations must embed UnimplementedAuthServiceServer
// for forward compatibility
type AuthServiceServer interface {
	Auth(AuthService_AuthServer) error
	CheckAuth(AuthService_CheckAuthServer) error
	mustEmbedUnimplementedAuthServiceServer()
}

// UnimplementedAuthServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServiceServer struct {
	proxyImpl protocol.Invoker
}

func (UnimplementedAuthServiceServer) Auth(AuthService_AuthServer) error {
	return status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServiceServer) CheckAuth(AuthService_CheckAuthServer) error {
	return status.Errorf(codes.Unimplemented, "method CheckAuth not implemented")
}
func (s *UnimplementedAuthServiceServer) XXX_SetProxyImpl(impl protocol.Invoker) {
	s.proxyImpl = impl
}

func (s *UnimplementedAuthServiceServer) XXX_GetProxyImpl() protocol.Invoker {
	return s.proxyImpl
}

func (s *UnimplementedAuthServiceServer) XXX_ServiceDesc() *grpc_go.ServiceDesc {
	return &AuthService_ServiceDesc
}
func (s *UnimplementedAuthServiceServer) XXX_InterfaceName() string {
	return "api.AuthService"
}

func (UnimplementedAuthServiceServer) mustEmbedUnimplementedAuthServiceServer() {}

// UnsafeAuthServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServiceServer will
// result in compilation errors.
type UnsafeAuthServiceServer interface {
	mustEmbedUnimplementedAuthServiceServer()
}

func RegisterAuthServiceServer(s grpc_go.ServiceRegistrar, srv AuthServiceServer) {
	s.RegisterService(&AuthService_ServiceDesc, srv)
}

func _AuthService_Auth_Handler(srv interface{}, stream grpc_go.ServerStream) error {
	_, ok := srv.(dubbo3.Dubbo3GrpcService)
	ctx := stream.Context()
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	stream.(grpc_go.CtxSetterStream).SetContext(context.WithValue(ctx, constant1.AttachmentKey, invAttachment))
	invo := invocation.NewRPCInvocation("Auth", nil, nil)
	if !ok {
		fmt.Println(invo)
		return nil
	}
	return srv.(AuthServiceServer).Auth(&authServiceAuthServer{stream})
}

type AuthService_AuthServer interface {
	SendAndClose(*Result) error
	Recv() (*AuthReq, error)
	grpc_go.ServerStream
}

type authServiceAuthServer struct {
	grpc_go.ServerStream
}

func (x *authServiceAuthServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceAuthServer) Recv() (*AuthReq, error) {
	m := new(AuthReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _AuthService_CheckAuth_Handler(srv interface{}, stream grpc_go.ServerStream) error {
	_, ok := srv.(dubbo3.Dubbo3GrpcService)
	ctx := stream.Context()
	md, _ := metadata.FromIncomingContext(ctx)
	invAttachment := make(map[string]interface{}, len(md))
	for k, v := range md {
		invAttachment[k] = v
	}
	stream.(grpc_go.CtxSetterStream).SetContext(context.WithValue(ctx, constant1.AttachmentKey, invAttachment))
	invo := invocation.NewRPCInvocation("CheckAuth", nil, nil)
	if !ok {
		fmt.Println(invo)
		return nil
	}
	return srv.(AuthServiceServer).CheckAuth(&authServiceCheckAuthServer{stream})
}

type AuthService_CheckAuthServer interface {
	SendAndClose(*Result) error
	Recv() (*AuthCheckReq, error)
	grpc_go.ServerStream
}

type authServiceCheckAuthServer struct {
	grpc_go.ServerStream
}

func (x *authServiceCheckAuthServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *authServiceCheckAuthServer) Recv() (*AuthCheckReq, error) {
	m := new(AuthCheckReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// AuthService_ServiceDesc is the grpc_go.ServiceDesc for AuthService service.
// It's only intended for direct use with grpc_go.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthService_ServiceDesc = grpc_go.ServiceDesc{
	ServiceName: "api.AuthService",
	HandlerType: (*AuthServiceServer)(nil),
	Methods:     []grpc_go.MethodDesc{},
	Streams: []grpc_go.StreamDesc{
		{
			StreamName:    "Auth",
			Handler:       _AuthService_Auth_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "CheckAuth",
			Handler:       _AuthService_CheckAuth_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "auth_api.proto",
}
