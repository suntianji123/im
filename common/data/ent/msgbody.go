// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/im/common/data/ent/msgbody"
)

// MsgBody is the model entity for the MsgBody schema.
type MsgBody struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MsgID holds the value of the "msg_id" field.
	MsgID int64 `json:"msg_id,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Cts holds the value of the "cts" field.
	Cts          int64 `json:"cts,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MsgBody) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case msgbody.FieldID, msgbody.FieldMsgID, msgbody.FieldCts:
			values[i] = new(sql.NullInt64)
		case msgbody.FieldBody:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MsgBody fields.
func (mb *MsgBody) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case msgbody.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			mb.ID = int(value.Int64)
		case msgbody.FieldMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field msg_id", values[i])
			} else if value.Valid {
				mb.MsgID = value.Int64
			}
		case msgbody.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				mb.Body = value.String
			}
		case msgbody.FieldCts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field cts", values[i])
			} else if value.Valid {
				mb.Cts = value.Int64
			}
		default:
			mb.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MsgBody.
// This includes values selected through modifiers, order, etc.
func (mb *MsgBody) Value(name string) (ent.Value, error) {
	return mb.selectValues.Get(name)
}

// Update returns a builder for updating this MsgBody.
// Note that you need to call MsgBody.Unwrap() before calling this method if this MsgBody
// was returned from a transaction, and the transaction was committed or rolled back.
func (mb *MsgBody) Update() *MsgBodyUpdateOne {
	return NewMsgBodyClient(mb.config).UpdateOne(mb)
}

// Unwrap unwraps the MsgBody entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (mb *MsgBody) Unwrap() *MsgBody {
	_tx, ok := mb.config.driver.(*txDriver)
	if !ok {
		panic("ent: MsgBody is not a transactional entity")
	}
	mb.config.driver = _tx.drv
	return mb
}

// String implements the fmt.Stringer.
func (mb *MsgBody) String() string {
	var builder strings.Builder
	builder.WriteString("MsgBody(")
	builder.WriteString(fmt.Sprintf("id=%v, ", mb.ID))
	builder.WriteString("msg_id=")
	builder.WriteString(fmt.Sprintf("%v", mb.MsgID))
	builder.WriteString(", ")
	builder.WriteString("body=")
	builder.WriteString(mb.Body)
	builder.WriteString(", ")
	builder.WriteString("cts=")
	builder.WriteString(fmt.Sprintf("%v", mb.Cts))
	builder.WriteByte(')')
	return builder.String()
}

// MsgBodies is a parsable slice of MsgBody.
type MsgBodies []*MsgBody
