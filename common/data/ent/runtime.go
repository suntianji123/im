// Code generated by ent, DO NOT EDIT.

package ent

import (
	"github.com/im/common/data/ent/schema"
	"github.com/im/common/data/ent/userinfo"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	userinfoFields := schema.UserInfo{}.Fields()
	_ = userinfoFields
	// userinfoDescUsername is the schema descriptor for username field.
	userinfoDescUsername := userinfoFields[1].Descriptor()
	// userinfo.UsernameValidator is a validator for the "username" field. It is called by the builders before save.
	userinfo.UsernameValidator = userinfoDescUsername.Validators[0].(func(string) error)
	// userinfoDescPassword is the schema descriptor for password field.
	userinfoDescPassword := userinfoFields[2].Descriptor()
	// userinfo.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	userinfo.PasswordValidator = userinfoDescPassword.Validators[0].(func(string) error)
	// userinfoDescNickname is the schema descriptor for nickname field.
	userinfoDescNickname := userinfoFields[3].Descriptor()
	// userinfo.NicknameValidator is a validator for the "nickname" field. It is called by the builders before save.
	userinfo.NicknameValidator = userinfoDescNickname.Validators[0].(func(string) error)
	// userinfoDescAvatar is the schema descriptor for avatar field.
	userinfoDescAvatar := userinfoFields[4].Descriptor()
	// userinfo.AvatarValidator is a validator for the "avatar" field. It is called by the builders before save.
	userinfo.AvatarValidator = userinfoDescAvatar.Validators[0].(func(string) error)
	// userinfoDescExt is the schema descriptor for ext field.
	userinfoDescExt := userinfoFields[6].Descriptor()
	// userinfo.ExtValidator is a validator for the "ext" field. It is called by the builders before save.
	userinfo.ExtValidator = userinfoDescExt.Validators[0].(func(string) error)
}
