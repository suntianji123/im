// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/immsg"
	"github.com/im/common/data/ent/predicate"
)

// IMMsgUpdate is the builder for updating IMMsg entities.
type IMMsgUpdate struct {
	config
	hooks    []Hook
	mutation *IMMsgMutation
}

// Where appends a list predicates to the IMMsgUpdate builder.
func (imu *IMMsgUpdate) Where(ps ...predicate.IMMsg) *IMMsgUpdate {
	imu.mutation.Where(ps...)
	return imu
}

// SetSid sets the "sid" field.
func (imu *IMMsgUpdate) SetSid(s string) *IMMsgUpdate {
	imu.mutation.SetSid(s)
	return imu
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableSid(s *string) *IMMsgUpdate {
	if s != nil {
		imu.SetSid(*s)
	}
	return imu
}

// SetFromUID sets the "from_uid" field.
func (imu *IMMsgUpdate) SetFromUID(i int64) *IMMsgUpdate {
	imu.mutation.ResetFromUID()
	imu.mutation.SetFromUID(i)
	return imu
}

// SetNillableFromUID sets the "from_uid" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableFromUID(i *int64) *IMMsgUpdate {
	if i != nil {
		imu.SetFromUID(*i)
	}
	return imu
}

// AddFromUID adds i to the "from_uid" field.
func (imu *IMMsgUpdate) AddFromUID(i int64) *IMMsgUpdate {
	imu.mutation.AddFromUID(i)
	return imu
}

// SetFromAppid sets the "from_appid" field.
func (imu *IMMsgUpdate) SetFromAppid(i int) *IMMsgUpdate {
	imu.mutation.ResetFromAppid()
	imu.mutation.SetFromAppid(i)
	return imu
}

// SetNillableFromAppid sets the "from_appid" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableFromAppid(i *int) *IMMsgUpdate {
	if i != nil {
		imu.SetFromAppid(*i)
	}
	return imu
}

// AddFromAppid adds i to the "from_appid" field.
func (imu *IMMsgUpdate) AddFromAppid(i int) *IMMsgUpdate {
	imu.mutation.AddFromAppid(i)
	return imu
}

// SetToUID sets the "to_uid" field.
func (imu *IMMsgUpdate) SetToUID(i int64) *IMMsgUpdate {
	imu.mutation.ResetToUID()
	imu.mutation.SetToUID(i)
	return imu
}

// SetNillableToUID sets the "to_uid" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableToUID(i *int64) *IMMsgUpdate {
	if i != nil {
		imu.SetToUID(*i)
	}
	return imu
}

// AddToUID adds i to the "to_uid" field.
func (imu *IMMsgUpdate) AddToUID(i int64) *IMMsgUpdate {
	imu.mutation.AddToUID(i)
	return imu
}

// SetToAppid sets the "to_appid" field.
func (imu *IMMsgUpdate) SetToAppid(i int) *IMMsgUpdate {
	imu.mutation.ResetToAppid()
	imu.mutation.SetToAppid(i)
	return imu
}

// SetNillableToAppid sets the "to_appid" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableToAppid(i *int) *IMMsgUpdate {
	if i != nil {
		imu.SetToAppid(*i)
	}
	return imu
}

// AddToAppid adds i to the "to_appid" field.
func (imu *IMMsgUpdate) AddToAppid(i int) *IMMsgUpdate {
	imu.mutation.AddToAppid(i)
	return imu
}

// SetChannel sets the "channel" field.
func (imu *IMMsgUpdate) SetChannel(i int) *IMMsgUpdate {
	imu.mutation.ResetChannel()
	imu.mutation.SetChannel(i)
	return imu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableChannel(i *int) *IMMsgUpdate {
	if i != nil {
		imu.SetChannel(*i)
	}
	return imu
}

// AddChannel adds i to the "channel" field.
func (imu *IMMsgUpdate) AddChannel(i int) *IMMsgUpdate {
	imu.mutation.AddChannel(i)
	return imu
}

// SetMsgID sets the "msg_id" field.
func (imu *IMMsgUpdate) SetMsgID(i int64) *IMMsgUpdate {
	imu.mutation.ResetMsgID()
	imu.mutation.SetMsgID(i)
	return imu
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableMsgID(i *int64) *IMMsgUpdate {
	if i != nil {
		imu.SetMsgID(*i)
	}
	return imu
}

// AddMsgID adds i to the "msg_id" field.
func (imu *IMMsgUpdate) AddMsgID(i int64) *IMMsgUpdate {
	imu.mutation.AddMsgID(i)
	return imu
}

// SetCts sets the "cts" field.
func (imu *IMMsgUpdate) SetCts(i int64) *IMMsgUpdate {
	imu.mutation.ResetCts()
	imu.mutation.SetCts(i)
	return imu
}

// SetNillableCts sets the "cts" field if the given value is not nil.
func (imu *IMMsgUpdate) SetNillableCts(i *int64) *IMMsgUpdate {
	if i != nil {
		imu.SetCts(*i)
	}
	return imu
}

// AddCts adds i to the "cts" field.
func (imu *IMMsgUpdate) AddCts(i int64) *IMMsgUpdate {
	imu.mutation.AddCts(i)
	return imu
}

// Mutation returns the IMMsgMutation object of the builder.
func (imu *IMMsgUpdate) Mutation() *IMMsgMutation {
	return imu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (imu *IMMsgUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, imu.sqlSave, imu.mutation, imu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imu *IMMsgUpdate) SaveX(ctx context.Context) int {
	affected, err := imu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (imu *IMMsgUpdate) Exec(ctx context.Context) error {
	_, err := imu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imu *IMMsgUpdate) ExecX(ctx context.Context) {
	if err := imu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (imu *IMMsgUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(immsg.Table, immsg.Columns, sqlgraph.NewFieldSpec(immsg.FieldID, field.TypeInt64))
	if ps := imu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imu.mutation.Sid(); ok {
		_spec.SetField(immsg.FieldSid, field.TypeString, value)
	}
	if value, ok := imu.mutation.FromUID(); ok {
		_spec.SetField(immsg.FieldFromUID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.AddedFromUID(); ok {
		_spec.AddField(immsg.FieldFromUID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.FromAppid(); ok {
		_spec.SetField(immsg.FieldFromAppid, field.TypeInt, value)
	}
	if value, ok := imu.mutation.AddedFromAppid(); ok {
		_spec.AddField(immsg.FieldFromAppid, field.TypeInt, value)
	}
	if value, ok := imu.mutation.ToUID(); ok {
		_spec.SetField(immsg.FieldToUID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.AddedToUID(); ok {
		_spec.AddField(immsg.FieldToUID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.ToAppid(); ok {
		_spec.SetField(immsg.FieldToAppid, field.TypeInt, value)
	}
	if value, ok := imu.mutation.AddedToAppid(); ok {
		_spec.AddField(immsg.FieldToAppid, field.TypeInt, value)
	}
	if value, ok := imu.mutation.Channel(); ok {
		_spec.SetField(immsg.FieldChannel, field.TypeInt, value)
	}
	if value, ok := imu.mutation.AddedChannel(); ok {
		_spec.AddField(immsg.FieldChannel, field.TypeInt, value)
	}
	if value, ok := imu.mutation.MsgID(); ok {
		_spec.SetField(immsg.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.AddedMsgID(); ok {
		_spec.AddField(immsg.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.Cts(); ok {
		_spec.SetField(immsg.FieldCts, field.TypeInt64, value)
	}
	if value, ok := imu.mutation.AddedCts(); ok {
		_spec.AddField(immsg.FieldCts, field.TypeInt64, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, imu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{immsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	imu.mutation.done = true
	return n, nil
}

// IMMsgUpdateOne is the builder for updating a single IMMsg entity.
type IMMsgUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IMMsgMutation
}

// SetSid sets the "sid" field.
func (imuo *IMMsgUpdateOne) SetSid(s string) *IMMsgUpdateOne {
	imuo.mutation.SetSid(s)
	return imuo
}

// SetNillableSid sets the "sid" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableSid(s *string) *IMMsgUpdateOne {
	if s != nil {
		imuo.SetSid(*s)
	}
	return imuo
}

// SetFromUID sets the "from_uid" field.
func (imuo *IMMsgUpdateOne) SetFromUID(i int64) *IMMsgUpdateOne {
	imuo.mutation.ResetFromUID()
	imuo.mutation.SetFromUID(i)
	return imuo
}

// SetNillableFromUID sets the "from_uid" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableFromUID(i *int64) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetFromUID(*i)
	}
	return imuo
}

// AddFromUID adds i to the "from_uid" field.
func (imuo *IMMsgUpdateOne) AddFromUID(i int64) *IMMsgUpdateOne {
	imuo.mutation.AddFromUID(i)
	return imuo
}

// SetFromAppid sets the "from_appid" field.
func (imuo *IMMsgUpdateOne) SetFromAppid(i int) *IMMsgUpdateOne {
	imuo.mutation.ResetFromAppid()
	imuo.mutation.SetFromAppid(i)
	return imuo
}

// SetNillableFromAppid sets the "from_appid" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableFromAppid(i *int) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetFromAppid(*i)
	}
	return imuo
}

// AddFromAppid adds i to the "from_appid" field.
func (imuo *IMMsgUpdateOne) AddFromAppid(i int) *IMMsgUpdateOne {
	imuo.mutation.AddFromAppid(i)
	return imuo
}

// SetToUID sets the "to_uid" field.
func (imuo *IMMsgUpdateOne) SetToUID(i int64) *IMMsgUpdateOne {
	imuo.mutation.ResetToUID()
	imuo.mutation.SetToUID(i)
	return imuo
}

// SetNillableToUID sets the "to_uid" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableToUID(i *int64) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetToUID(*i)
	}
	return imuo
}

// AddToUID adds i to the "to_uid" field.
func (imuo *IMMsgUpdateOne) AddToUID(i int64) *IMMsgUpdateOne {
	imuo.mutation.AddToUID(i)
	return imuo
}

// SetToAppid sets the "to_appid" field.
func (imuo *IMMsgUpdateOne) SetToAppid(i int) *IMMsgUpdateOne {
	imuo.mutation.ResetToAppid()
	imuo.mutation.SetToAppid(i)
	return imuo
}

// SetNillableToAppid sets the "to_appid" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableToAppid(i *int) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetToAppid(*i)
	}
	return imuo
}

// AddToAppid adds i to the "to_appid" field.
func (imuo *IMMsgUpdateOne) AddToAppid(i int) *IMMsgUpdateOne {
	imuo.mutation.AddToAppid(i)
	return imuo
}

// SetChannel sets the "channel" field.
func (imuo *IMMsgUpdateOne) SetChannel(i int) *IMMsgUpdateOne {
	imuo.mutation.ResetChannel()
	imuo.mutation.SetChannel(i)
	return imuo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableChannel(i *int) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetChannel(*i)
	}
	return imuo
}

// AddChannel adds i to the "channel" field.
func (imuo *IMMsgUpdateOne) AddChannel(i int) *IMMsgUpdateOne {
	imuo.mutation.AddChannel(i)
	return imuo
}

// SetMsgID sets the "msg_id" field.
func (imuo *IMMsgUpdateOne) SetMsgID(i int64) *IMMsgUpdateOne {
	imuo.mutation.ResetMsgID()
	imuo.mutation.SetMsgID(i)
	return imuo
}

// SetNillableMsgID sets the "msg_id" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableMsgID(i *int64) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetMsgID(*i)
	}
	return imuo
}

// AddMsgID adds i to the "msg_id" field.
func (imuo *IMMsgUpdateOne) AddMsgID(i int64) *IMMsgUpdateOne {
	imuo.mutation.AddMsgID(i)
	return imuo
}

// SetCts sets the "cts" field.
func (imuo *IMMsgUpdateOne) SetCts(i int64) *IMMsgUpdateOne {
	imuo.mutation.ResetCts()
	imuo.mutation.SetCts(i)
	return imuo
}

// SetNillableCts sets the "cts" field if the given value is not nil.
func (imuo *IMMsgUpdateOne) SetNillableCts(i *int64) *IMMsgUpdateOne {
	if i != nil {
		imuo.SetCts(*i)
	}
	return imuo
}

// AddCts adds i to the "cts" field.
func (imuo *IMMsgUpdateOne) AddCts(i int64) *IMMsgUpdateOne {
	imuo.mutation.AddCts(i)
	return imuo
}

// Mutation returns the IMMsgMutation object of the builder.
func (imuo *IMMsgUpdateOne) Mutation() *IMMsgMutation {
	return imuo.mutation
}

// Where appends a list predicates to the IMMsgUpdate builder.
func (imuo *IMMsgUpdateOne) Where(ps ...predicate.IMMsg) *IMMsgUpdateOne {
	imuo.mutation.Where(ps...)
	return imuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (imuo *IMMsgUpdateOne) Select(field string, fields ...string) *IMMsgUpdateOne {
	imuo.fields = append([]string{field}, fields...)
	return imuo
}

// Save executes the query and returns the updated IMMsg entity.
func (imuo *IMMsgUpdateOne) Save(ctx context.Context) (*IMMsg, error) {
	return withHooks(ctx, imuo.sqlSave, imuo.mutation, imuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (imuo *IMMsgUpdateOne) SaveX(ctx context.Context) *IMMsg {
	node, err := imuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (imuo *IMMsgUpdateOne) Exec(ctx context.Context) error {
	_, err := imuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imuo *IMMsgUpdateOne) ExecX(ctx context.Context) {
	if err := imuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (imuo *IMMsgUpdateOne) sqlSave(ctx context.Context) (_node *IMMsg, err error) {
	_spec := sqlgraph.NewUpdateSpec(immsg.Table, immsg.Columns, sqlgraph.NewFieldSpec(immsg.FieldID, field.TypeInt64))
	id, ok := imuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "IMMsg.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := imuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, immsg.FieldID)
		for _, f := range fields {
			if !immsg.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != immsg.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := imuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := imuo.mutation.Sid(); ok {
		_spec.SetField(immsg.FieldSid, field.TypeString, value)
	}
	if value, ok := imuo.mutation.FromUID(); ok {
		_spec.SetField(immsg.FieldFromUID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.AddedFromUID(); ok {
		_spec.AddField(immsg.FieldFromUID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.FromAppid(); ok {
		_spec.SetField(immsg.FieldFromAppid, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.AddedFromAppid(); ok {
		_spec.AddField(immsg.FieldFromAppid, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.ToUID(); ok {
		_spec.SetField(immsg.FieldToUID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.AddedToUID(); ok {
		_spec.AddField(immsg.FieldToUID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.ToAppid(); ok {
		_spec.SetField(immsg.FieldToAppid, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.AddedToAppid(); ok {
		_spec.AddField(immsg.FieldToAppid, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.Channel(); ok {
		_spec.SetField(immsg.FieldChannel, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.AddedChannel(); ok {
		_spec.AddField(immsg.FieldChannel, field.TypeInt, value)
	}
	if value, ok := imuo.mutation.MsgID(); ok {
		_spec.SetField(immsg.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.AddedMsgID(); ok {
		_spec.AddField(immsg.FieldMsgID, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.Cts(); ok {
		_spec.SetField(immsg.FieldCts, field.TypeInt64, value)
	}
	if value, ok := imuo.mutation.AddedCts(); ok {
		_spec.AddField(immsg.FieldCts, field.TypeInt64, value)
	}
	_node = &IMMsg{config: imuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, imuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{immsg.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	imuo.mutation.done = true
	return _node, nil
}
