// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/im/common/data/ent/chatlist"
)

// ChatList is the model entity for the ChatList schema.
type ChatList struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID int64 `json:"uid,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel int `json:"channel,omitempty"`
	// ChatID holds the value of the "chat_id" field.
	ChatID int64 `json:"chat_id,omitempty"`
	// MaxMsgID holds the value of the "max_msg_id" field.
	MaxMsgID int64 `json:"max_msg_id,omitempty"`
	// Uts holds the value of the "uts" field.
	Uts int64 `json:"uts,omitempty"`
	// Type holds the value of the "type" field.
	Type         int `json:"type,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ChatList) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case chatlist.FieldID, chatlist.FieldUID, chatlist.FieldChannel, chatlist.FieldChatID, chatlist.FieldMaxMsgID, chatlist.FieldUts, chatlist.FieldType:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ChatList fields.
func (cl *ChatList) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case chatlist.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cl.ID = int64(value.Int64)
		case chatlist.FieldUID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				cl.UID = value.Int64
			}
		case chatlist.FieldChannel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				cl.Channel = int(value.Int64)
			}
		case chatlist.FieldChatID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field chat_id", values[i])
			} else if value.Valid {
				cl.ChatID = value.Int64
			}
		case chatlist.FieldMaxMsgID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_msg_id", values[i])
			} else if value.Valid {
				cl.MaxMsgID = value.Int64
			}
		case chatlist.FieldUts:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field uts", values[i])
			} else if value.Valid {
				cl.Uts = value.Int64
			}
		case chatlist.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				cl.Type = int(value.Int64)
			}
		default:
			cl.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ChatList.
// This includes values selected through modifiers, order, etc.
func (cl *ChatList) Value(name string) (ent.Value, error) {
	return cl.selectValues.Get(name)
}

// Update returns a builder for updating this ChatList.
// Note that you need to call ChatList.Unwrap() before calling this method if this ChatList
// was returned from a transaction, and the transaction was committed or rolled back.
func (cl *ChatList) Update() *ChatListUpdateOne {
	return NewChatListClient(cl.config).UpdateOne(cl)
}

// Unwrap unwraps the ChatList entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cl *ChatList) Unwrap() *ChatList {
	_tx, ok := cl.config.driver.(*txDriver)
	if !ok {
		panic("ent: ChatList is not a transactional entity")
	}
	cl.config.driver = _tx.drv
	return cl
}

// String implements the fmt.Stringer.
func (cl *ChatList) String() string {
	var builder strings.Builder
	builder.WriteString("ChatList(")
	builder.WriteString(fmt.Sprintf("id=%v, ", cl.ID))
	builder.WriteString("uid=")
	builder.WriteString(fmt.Sprintf("%v", cl.UID))
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", cl.Channel))
	builder.WriteString(", ")
	builder.WriteString("chat_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.ChatID))
	builder.WriteString(", ")
	builder.WriteString("max_msg_id=")
	builder.WriteString(fmt.Sprintf("%v", cl.MaxMsgID))
	builder.WriteString(", ")
	builder.WriteString("uts=")
	builder.WriteString(fmt.Sprintf("%v", cl.Uts))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", cl.Type))
	builder.WriteByte(')')
	return builder.String()
}

// ChatLists is a parsable slice of ChatList.
type ChatLists []*ChatList
