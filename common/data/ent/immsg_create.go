// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/immsg"
)

// IMMsgCreate is the builder for creating a IMMsg entity.
type IMMsgCreate struct {
	config
	mutation *IMMsgMutation
	hooks    []Hook
}

// SetSid sets the "sid" field.
func (imc *IMMsgCreate) SetSid(s string) *IMMsgCreate {
	imc.mutation.SetSid(s)
	return imc
}

// SetFromUID sets the "from_uid" field.
func (imc *IMMsgCreate) SetFromUID(i int64) *IMMsgCreate {
	imc.mutation.SetFromUID(i)
	return imc
}

// SetFromAppid sets the "from_appid" field.
func (imc *IMMsgCreate) SetFromAppid(i int) *IMMsgCreate {
	imc.mutation.SetFromAppid(i)
	return imc
}

// SetToUID sets the "to_uid" field.
func (imc *IMMsgCreate) SetToUID(i int64) *IMMsgCreate {
	imc.mutation.SetToUID(i)
	return imc
}

// SetToAppid sets the "to_appid" field.
func (imc *IMMsgCreate) SetToAppid(i int) *IMMsgCreate {
	imc.mutation.SetToAppid(i)
	return imc
}

// SetChannel sets the "channel" field.
func (imc *IMMsgCreate) SetChannel(i int) *IMMsgCreate {
	imc.mutation.SetChannel(i)
	return imc
}

// SetMsgID sets the "msg_id" field.
func (imc *IMMsgCreate) SetMsgID(i int64) *IMMsgCreate {
	imc.mutation.SetMsgID(i)
	return imc
}

// SetCts sets the "cts" field.
func (imc *IMMsgCreate) SetCts(i int64) *IMMsgCreate {
	imc.mutation.SetCts(i)
	return imc
}

// SetID sets the "id" field.
func (imc *IMMsgCreate) SetID(i int64) *IMMsgCreate {
	imc.mutation.SetID(i)
	return imc
}

// Mutation returns the IMMsgMutation object of the builder.
func (imc *IMMsgCreate) Mutation() *IMMsgMutation {
	return imc.mutation
}

// Save creates the IMMsg in the database.
func (imc *IMMsgCreate) Save(ctx context.Context) (*IMMsg, error) {
	return withHooks(ctx, imc.sqlSave, imc.mutation, imc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (imc *IMMsgCreate) SaveX(ctx context.Context) *IMMsg {
	v, err := imc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imc *IMMsgCreate) Exec(ctx context.Context) error {
	_, err := imc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imc *IMMsgCreate) ExecX(ctx context.Context) {
	if err := imc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (imc *IMMsgCreate) check() error {
	if _, ok := imc.mutation.Sid(); !ok {
		return &ValidationError{Name: "sid", err: errors.New(`ent: missing required field "IMMsg.sid"`)}
	}
	if _, ok := imc.mutation.FromUID(); !ok {
		return &ValidationError{Name: "from_uid", err: errors.New(`ent: missing required field "IMMsg.from_uid"`)}
	}
	if _, ok := imc.mutation.FromAppid(); !ok {
		return &ValidationError{Name: "from_appid", err: errors.New(`ent: missing required field "IMMsg.from_appid"`)}
	}
	if _, ok := imc.mutation.ToUID(); !ok {
		return &ValidationError{Name: "to_uid", err: errors.New(`ent: missing required field "IMMsg.to_uid"`)}
	}
	if _, ok := imc.mutation.ToAppid(); !ok {
		return &ValidationError{Name: "to_appid", err: errors.New(`ent: missing required field "IMMsg.to_appid"`)}
	}
	if _, ok := imc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "IMMsg.channel"`)}
	}
	if _, ok := imc.mutation.MsgID(); !ok {
		return &ValidationError{Name: "msg_id", err: errors.New(`ent: missing required field "IMMsg.msg_id"`)}
	}
	if _, ok := imc.mutation.Cts(); !ok {
		return &ValidationError{Name: "cts", err: errors.New(`ent: missing required field "IMMsg.cts"`)}
	}
	return nil
}

func (imc *IMMsgCreate) sqlSave(ctx context.Context) (*IMMsg, error) {
	if err := imc.check(); err != nil {
		return nil, err
	}
	_node, _spec := imc.createSpec()
	if err := sqlgraph.CreateNode(ctx, imc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	imc.mutation.id = &_node.ID
	imc.mutation.done = true
	return _node, nil
}

func (imc *IMMsgCreate) createSpec() (*IMMsg, *sqlgraph.CreateSpec) {
	var (
		_node = &IMMsg{config: imc.config}
		_spec = sqlgraph.NewCreateSpec(immsg.Table, sqlgraph.NewFieldSpec(immsg.FieldID, field.TypeInt64))
	)
	if id, ok := imc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := imc.mutation.Sid(); ok {
		_spec.SetField(immsg.FieldSid, field.TypeString, value)
		_node.Sid = value
	}
	if value, ok := imc.mutation.FromUID(); ok {
		_spec.SetField(immsg.FieldFromUID, field.TypeInt64, value)
		_node.FromUID = value
	}
	if value, ok := imc.mutation.FromAppid(); ok {
		_spec.SetField(immsg.FieldFromAppid, field.TypeInt, value)
		_node.FromAppid = value
	}
	if value, ok := imc.mutation.ToUID(); ok {
		_spec.SetField(immsg.FieldToUID, field.TypeInt64, value)
		_node.ToUID = value
	}
	if value, ok := imc.mutation.ToAppid(); ok {
		_spec.SetField(immsg.FieldToAppid, field.TypeInt, value)
		_node.ToAppid = value
	}
	if value, ok := imc.mutation.Channel(); ok {
		_spec.SetField(immsg.FieldChannel, field.TypeInt, value)
		_node.Channel = value
	}
	if value, ok := imc.mutation.MsgID(); ok {
		_spec.SetField(immsg.FieldMsgID, field.TypeInt64, value)
		_node.MsgID = value
	}
	if value, ok := imc.mutation.Cts(); ok {
		_spec.SetField(immsg.FieldCts, field.TypeInt64, value)
		_node.Cts = value
	}
	return _node, _spec
}

// IMMsgCreateBulk is the builder for creating many IMMsg entities in bulk.
type IMMsgCreateBulk struct {
	config
	err      error
	builders []*IMMsgCreate
}

// Save creates the IMMsg entities in the database.
func (imcb *IMMsgCreateBulk) Save(ctx context.Context) ([]*IMMsg, error) {
	if imcb.err != nil {
		return nil, imcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(imcb.builders))
	nodes := make([]*IMMsg, len(imcb.builders))
	mutators := make([]Mutator, len(imcb.builders))
	for i := range imcb.builders {
		func(i int, root context.Context) {
			builder := imcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*IMMsgMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, imcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, imcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, imcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (imcb *IMMsgCreateBulk) SaveX(ctx context.Context) []*IMMsg {
	v, err := imcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (imcb *IMMsgCreateBulk) Exec(ctx context.Context) error {
	_, err := imcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (imcb *IMMsgCreateBulk) ExecX(ctx context.Context) {
	if err := imcb.Exec(ctx); err != nil {
		panic(err)
	}
}
