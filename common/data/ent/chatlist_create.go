// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/chatlist"
)

// ChatListCreate is the builder for creating a ChatList entity.
type ChatListCreate struct {
	config
	mutation *ChatListMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (clc *ChatListCreate) SetUID(i int64) *ChatListCreate {
	clc.mutation.SetUID(i)
	return clc
}

// SetChannel sets the "channel" field.
func (clc *ChatListCreate) SetChannel(i int) *ChatListCreate {
	clc.mutation.SetChannel(i)
	return clc
}

// SetChatID sets the "chat_id" field.
func (clc *ChatListCreate) SetChatID(i int64) *ChatListCreate {
	clc.mutation.SetChatID(i)
	return clc
}

// SetMaxMsgID sets the "max_msg_id" field.
func (clc *ChatListCreate) SetMaxMsgID(i int64) *ChatListCreate {
	clc.mutation.SetMaxMsgID(i)
	return clc
}

// SetUts sets the "uts" field.
func (clc *ChatListCreate) SetUts(i int64) *ChatListCreate {
	clc.mutation.SetUts(i)
	return clc
}

// SetType sets the "type" field.
func (clc *ChatListCreate) SetType(i int) *ChatListCreate {
	clc.mutation.SetType(i)
	return clc
}

// SetID sets the "id" field.
func (clc *ChatListCreate) SetID(i int64) *ChatListCreate {
	clc.mutation.SetID(i)
	return clc
}

// Mutation returns the ChatListMutation object of the builder.
func (clc *ChatListCreate) Mutation() *ChatListMutation {
	return clc.mutation
}

// Save creates the ChatList in the database.
func (clc *ChatListCreate) Save(ctx context.Context) (*ChatList, error) {
	return withHooks(ctx, clc.sqlSave, clc.mutation, clc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (clc *ChatListCreate) SaveX(ctx context.Context) *ChatList {
	v, err := clc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clc *ChatListCreate) Exec(ctx context.Context) error {
	_, err := clc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clc *ChatListCreate) ExecX(ctx context.Context) {
	if err := clc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (clc *ChatListCreate) check() error {
	if _, ok := clc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "ChatList.uid"`)}
	}
	if _, ok := clc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required field "ChatList.channel"`)}
	}
	if _, ok := clc.mutation.ChatID(); !ok {
		return &ValidationError{Name: "chat_id", err: errors.New(`ent: missing required field "ChatList.chat_id"`)}
	}
	if _, ok := clc.mutation.MaxMsgID(); !ok {
		return &ValidationError{Name: "max_msg_id", err: errors.New(`ent: missing required field "ChatList.max_msg_id"`)}
	}
	if _, ok := clc.mutation.Uts(); !ok {
		return &ValidationError{Name: "uts", err: errors.New(`ent: missing required field "ChatList.uts"`)}
	}
	if _, ok := clc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "ChatList.type"`)}
	}
	return nil
}

func (clc *ChatListCreate) sqlSave(ctx context.Context) (*ChatList, error) {
	if err := clc.check(); err != nil {
		return nil, err
	}
	_node, _spec := clc.createSpec()
	if err := sqlgraph.CreateNode(ctx, clc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	clc.mutation.id = &_node.ID
	clc.mutation.done = true
	return _node, nil
}

func (clc *ChatListCreate) createSpec() (*ChatList, *sqlgraph.CreateSpec) {
	var (
		_node = &ChatList{config: clc.config}
		_spec = sqlgraph.NewCreateSpec(chatlist.Table, sqlgraph.NewFieldSpec(chatlist.FieldID, field.TypeInt64))
	)
	if id, ok := clc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := clc.mutation.UID(); ok {
		_spec.SetField(chatlist.FieldUID, field.TypeInt64, value)
		_node.UID = value
	}
	if value, ok := clc.mutation.Channel(); ok {
		_spec.SetField(chatlist.FieldChannel, field.TypeInt, value)
		_node.Channel = value
	}
	if value, ok := clc.mutation.ChatID(); ok {
		_spec.SetField(chatlist.FieldChatID, field.TypeInt64, value)
		_node.ChatID = value
	}
	if value, ok := clc.mutation.MaxMsgID(); ok {
		_spec.SetField(chatlist.FieldMaxMsgID, field.TypeInt64, value)
		_node.MaxMsgID = value
	}
	if value, ok := clc.mutation.Uts(); ok {
		_spec.SetField(chatlist.FieldUts, field.TypeInt64, value)
		_node.Uts = value
	}
	if value, ok := clc.mutation.GetType(); ok {
		_spec.SetField(chatlist.FieldType, field.TypeInt, value)
		_node.Type = value
	}
	return _node, _spec
}

// ChatListCreateBulk is the builder for creating many ChatList entities in bulk.
type ChatListCreateBulk struct {
	config
	err      error
	builders []*ChatListCreate
}

// Save creates the ChatList entities in the database.
func (clcb *ChatListCreateBulk) Save(ctx context.Context) ([]*ChatList, error) {
	if clcb.err != nil {
		return nil, clcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(clcb.builders))
	nodes := make([]*ChatList, len(clcb.builders))
	mutators := make([]Mutator, len(clcb.builders))
	for i := range clcb.builders {
		func(i int, root context.Context) {
			builder := clcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ChatListMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, clcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, clcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, clcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (clcb *ChatListCreateBulk) SaveX(ctx context.Context) []*ChatList {
	v, err := clcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (clcb *ChatListCreateBulk) Exec(ctx context.Context) error {
	_, err := clcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clcb *ChatListCreateBulk) ExecX(ctx context.Context) {
	if err := clcb.Exec(ctx); err != nil {
		panic(err)
	}
}
