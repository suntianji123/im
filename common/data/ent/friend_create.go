// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/friend"
)

// FriendCreate is the builder for creating a Friend entity.
type FriendCreate struct {
	config
	mutation *FriendMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (fc *FriendCreate) SetUID(i int64) *FriendCreate {
	fc.mutation.SetUID(i)
	return fc
}

// SetPeerUID sets the "peer_uid" field.
func (fc *FriendCreate) SetPeerUID(i int64) *FriendCreate {
	fc.mutation.SetPeerUID(i)
	return fc
}

// SetState sets the "state" field.
func (fc *FriendCreate) SetState(i int) *FriendCreate {
	fc.mutation.SetState(i)
	return fc
}

// SetCts sets the "cts" field.
func (fc *FriendCreate) SetCts(i int64) *FriendCreate {
	fc.mutation.SetCts(i)
	return fc
}

// SetUts sets the "uts" field.
func (fc *FriendCreate) SetUts(i int64) *FriendCreate {
	fc.mutation.SetUts(i)
	return fc
}

// SetID sets the "id" field.
func (fc *FriendCreate) SetID(i int64) *FriendCreate {
	fc.mutation.SetID(i)
	return fc
}

// Mutation returns the FriendMutation object of the builder.
func (fc *FriendCreate) Mutation() *FriendMutation {
	return fc.mutation
}

// Save creates the Friend in the database.
func (fc *FriendCreate) Save(ctx context.Context) (*Friend, error) {
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FriendCreate) SaveX(ctx context.Context) *Friend {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FriendCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FriendCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FriendCreate) check() error {
	if _, ok := fc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "Friend.uid"`)}
	}
	if _, ok := fc.mutation.PeerUID(); !ok {
		return &ValidationError{Name: "peer_uid", err: errors.New(`ent: missing required field "Friend.peer_uid"`)}
	}
	if _, ok := fc.mutation.State(); !ok {
		return &ValidationError{Name: "state", err: errors.New(`ent: missing required field "Friend.state"`)}
	}
	if _, ok := fc.mutation.Cts(); !ok {
		return &ValidationError{Name: "cts", err: errors.New(`ent: missing required field "Friend.cts"`)}
	}
	if _, ok := fc.mutation.Uts(); !ok {
		return &ValidationError{Name: "uts", err: errors.New(`ent: missing required field "Friend.uts"`)}
	}
	return nil
}

func (fc *FriendCreate) sqlSave(ctx context.Context) (*Friend, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FriendCreate) createSpec() (*Friend, *sqlgraph.CreateSpec) {
	var (
		_node = &Friend{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(friend.Table, sqlgraph.NewFieldSpec(friend.FieldID, field.TypeInt64))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fc.mutation.UID(); ok {
		_spec.SetField(friend.FieldUID, field.TypeInt64, value)
		_node.UID = value
	}
	if value, ok := fc.mutation.PeerUID(); ok {
		_spec.SetField(friend.FieldPeerUID, field.TypeInt64, value)
		_node.PeerUID = value
	}
	if value, ok := fc.mutation.State(); ok {
		_spec.SetField(friend.FieldState, field.TypeInt, value)
		_node.State = value
	}
	if value, ok := fc.mutation.Cts(); ok {
		_spec.SetField(friend.FieldCts, field.TypeInt64, value)
		_node.Cts = value
	}
	if value, ok := fc.mutation.Uts(); ok {
		_spec.SetField(friend.FieldUts, field.TypeInt64, value)
		_node.Uts = value
	}
	return _node, _spec
}

// FriendCreateBulk is the builder for creating many Friend entities in bulk.
type FriendCreateBulk struct {
	config
	err      error
	builders []*FriendCreate
}

// Save creates the Friend entities in the database.
func (fcb *FriendCreateBulk) Save(ctx context.Context) ([]*Friend, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Friend, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FriendMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FriendCreateBulk) SaveX(ctx context.Context) []*Friend {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FriendCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FriendCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
