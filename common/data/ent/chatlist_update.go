// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/chatlist"
	"github.com/im/common/data/ent/predicate"
)

// ChatListUpdate is the builder for updating ChatList entities.
type ChatListUpdate struct {
	config
	hooks    []Hook
	mutation *ChatListMutation
}

// Where appends a list predicates to the ChatListUpdate builder.
func (clu *ChatListUpdate) Where(ps ...predicate.ChatList) *ChatListUpdate {
	clu.mutation.Where(ps...)
	return clu
}

// SetUID sets the "uid" field.
func (clu *ChatListUpdate) SetUID(i int64) *ChatListUpdate {
	clu.mutation.ResetUID()
	clu.mutation.SetUID(i)
	return clu
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableUID(i *int64) *ChatListUpdate {
	if i != nil {
		clu.SetUID(*i)
	}
	return clu
}

// AddUID adds i to the "uid" field.
func (clu *ChatListUpdate) AddUID(i int64) *ChatListUpdate {
	clu.mutation.AddUID(i)
	return clu
}

// SetChannel sets the "channel" field.
func (clu *ChatListUpdate) SetChannel(i int) *ChatListUpdate {
	clu.mutation.ResetChannel()
	clu.mutation.SetChannel(i)
	return clu
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableChannel(i *int) *ChatListUpdate {
	if i != nil {
		clu.SetChannel(*i)
	}
	return clu
}

// AddChannel adds i to the "channel" field.
func (clu *ChatListUpdate) AddChannel(i int) *ChatListUpdate {
	clu.mutation.AddChannel(i)
	return clu
}

// SetChatID sets the "chat_id" field.
func (clu *ChatListUpdate) SetChatID(i int64) *ChatListUpdate {
	clu.mutation.ResetChatID()
	clu.mutation.SetChatID(i)
	return clu
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableChatID(i *int64) *ChatListUpdate {
	if i != nil {
		clu.SetChatID(*i)
	}
	return clu
}

// AddChatID adds i to the "chat_id" field.
func (clu *ChatListUpdate) AddChatID(i int64) *ChatListUpdate {
	clu.mutation.AddChatID(i)
	return clu
}

// SetMaxMsgID sets the "max_msg_id" field.
func (clu *ChatListUpdate) SetMaxMsgID(i int64) *ChatListUpdate {
	clu.mutation.ResetMaxMsgID()
	clu.mutation.SetMaxMsgID(i)
	return clu
}

// SetNillableMaxMsgID sets the "max_msg_id" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableMaxMsgID(i *int64) *ChatListUpdate {
	if i != nil {
		clu.SetMaxMsgID(*i)
	}
	return clu
}

// AddMaxMsgID adds i to the "max_msg_id" field.
func (clu *ChatListUpdate) AddMaxMsgID(i int64) *ChatListUpdate {
	clu.mutation.AddMaxMsgID(i)
	return clu
}

// SetUts sets the "uts" field.
func (clu *ChatListUpdate) SetUts(i int64) *ChatListUpdate {
	clu.mutation.ResetUts()
	clu.mutation.SetUts(i)
	return clu
}

// SetNillableUts sets the "uts" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableUts(i *int64) *ChatListUpdate {
	if i != nil {
		clu.SetUts(*i)
	}
	return clu
}

// AddUts adds i to the "uts" field.
func (clu *ChatListUpdate) AddUts(i int64) *ChatListUpdate {
	clu.mutation.AddUts(i)
	return clu
}

// SetType sets the "type" field.
func (clu *ChatListUpdate) SetType(i int) *ChatListUpdate {
	clu.mutation.ResetType()
	clu.mutation.SetType(i)
	return clu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (clu *ChatListUpdate) SetNillableType(i *int) *ChatListUpdate {
	if i != nil {
		clu.SetType(*i)
	}
	return clu
}

// AddType adds i to the "type" field.
func (clu *ChatListUpdate) AddType(i int) *ChatListUpdate {
	clu.mutation.AddType(i)
	return clu
}

// Mutation returns the ChatListMutation object of the builder.
func (clu *ChatListUpdate) Mutation() *ChatListMutation {
	return clu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (clu *ChatListUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, clu.sqlSave, clu.mutation, clu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (clu *ChatListUpdate) SaveX(ctx context.Context) int {
	affected, err := clu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (clu *ChatListUpdate) Exec(ctx context.Context) error {
	_, err := clu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (clu *ChatListUpdate) ExecX(ctx context.Context) {
	if err := clu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (clu *ChatListUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatlist.Table, chatlist.Columns, sqlgraph.NewFieldSpec(chatlist.FieldID, field.TypeInt64))
	if ps := clu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := clu.mutation.UID(); ok {
		_spec.SetField(chatlist.FieldUID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.AddedUID(); ok {
		_spec.AddField(chatlist.FieldUID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.Channel(); ok {
		_spec.SetField(chatlist.FieldChannel, field.TypeInt, value)
	}
	if value, ok := clu.mutation.AddedChannel(); ok {
		_spec.AddField(chatlist.FieldChannel, field.TypeInt, value)
	}
	if value, ok := clu.mutation.ChatID(); ok {
		_spec.SetField(chatlist.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.AddedChatID(); ok {
		_spec.AddField(chatlist.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.MaxMsgID(); ok {
		_spec.SetField(chatlist.FieldMaxMsgID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.AddedMaxMsgID(); ok {
		_spec.AddField(chatlist.FieldMaxMsgID, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.Uts(); ok {
		_spec.SetField(chatlist.FieldUts, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.AddedUts(); ok {
		_spec.AddField(chatlist.FieldUts, field.TypeInt64, value)
	}
	if value, ok := clu.mutation.GetType(); ok {
		_spec.SetField(chatlist.FieldType, field.TypeInt, value)
	}
	if value, ok := clu.mutation.AddedType(); ok {
		_spec.AddField(chatlist.FieldType, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, clu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	clu.mutation.done = true
	return n, nil
}

// ChatListUpdateOne is the builder for updating a single ChatList entity.
type ChatListUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ChatListMutation
}

// SetUID sets the "uid" field.
func (cluo *ChatListUpdateOne) SetUID(i int64) *ChatListUpdateOne {
	cluo.mutation.ResetUID()
	cluo.mutation.SetUID(i)
	return cluo
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableUID(i *int64) *ChatListUpdateOne {
	if i != nil {
		cluo.SetUID(*i)
	}
	return cluo
}

// AddUID adds i to the "uid" field.
func (cluo *ChatListUpdateOne) AddUID(i int64) *ChatListUpdateOne {
	cluo.mutation.AddUID(i)
	return cluo
}

// SetChannel sets the "channel" field.
func (cluo *ChatListUpdateOne) SetChannel(i int) *ChatListUpdateOne {
	cluo.mutation.ResetChannel()
	cluo.mutation.SetChannel(i)
	return cluo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableChannel(i *int) *ChatListUpdateOne {
	if i != nil {
		cluo.SetChannel(*i)
	}
	return cluo
}

// AddChannel adds i to the "channel" field.
func (cluo *ChatListUpdateOne) AddChannel(i int) *ChatListUpdateOne {
	cluo.mutation.AddChannel(i)
	return cluo
}

// SetChatID sets the "chat_id" field.
func (cluo *ChatListUpdateOne) SetChatID(i int64) *ChatListUpdateOne {
	cluo.mutation.ResetChatID()
	cluo.mutation.SetChatID(i)
	return cluo
}

// SetNillableChatID sets the "chat_id" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableChatID(i *int64) *ChatListUpdateOne {
	if i != nil {
		cluo.SetChatID(*i)
	}
	return cluo
}

// AddChatID adds i to the "chat_id" field.
func (cluo *ChatListUpdateOne) AddChatID(i int64) *ChatListUpdateOne {
	cluo.mutation.AddChatID(i)
	return cluo
}

// SetMaxMsgID sets the "max_msg_id" field.
func (cluo *ChatListUpdateOne) SetMaxMsgID(i int64) *ChatListUpdateOne {
	cluo.mutation.ResetMaxMsgID()
	cluo.mutation.SetMaxMsgID(i)
	return cluo
}

// SetNillableMaxMsgID sets the "max_msg_id" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableMaxMsgID(i *int64) *ChatListUpdateOne {
	if i != nil {
		cluo.SetMaxMsgID(*i)
	}
	return cluo
}

// AddMaxMsgID adds i to the "max_msg_id" field.
func (cluo *ChatListUpdateOne) AddMaxMsgID(i int64) *ChatListUpdateOne {
	cluo.mutation.AddMaxMsgID(i)
	return cluo
}

// SetUts sets the "uts" field.
func (cluo *ChatListUpdateOne) SetUts(i int64) *ChatListUpdateOne {
	cluo.mutation.ResetUts()
	cluo.mutation.SetUts(i)
	return cluo
}

// SetNillableUts sets the "uts" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableUts(i *int64) *ChatListUpdateOne {
	if i != nil {
		cluo.SetUts(*i)
	}
	return cluo
}

// AddUts adds i to the "uts" field.
func (cluo *ChatListUpdateOne) AddUts(i int64) *ChatListUpdateOne {
	cluo.mutation.AddUts(i)
	return cluo
}

// SetType sets the "type" field.
func (cluo *ChatListUpdateOne) SetType(i int) *ChatListUpdateOne {
	cluo.mutation.ResetType()
	cluo.mutation.SetType(i)
	return cluo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (cluo *ChatListUpdateOne) SetNillableType(i *int) *ChatListUpdateOne {
	if i != nil {
		cluo.SetType(*i)
	}
	return cluo
}

// AddType adds i to the "type" field.
func (cluo *ChatListUpdateOne) AddType(i int) *ChatListUpdateOne {
	cluo.mutation.AddType(i)
	return cluo
}

// Mutation returns the ChatListMutation object of the builder.
func (cluo *ChatListUpdateOne) Mutation() *ChatListMutation {
	return cluo.mutation
}

// Where appends a list predicates to the ChatListUpdate builder.
func (cluo *ChatListUpdateOne) Where(ps ...predicate.ChatList) *ChatListUpdateOne {
	cluo.mutation.Where(ps...)
	return cluo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cluo *ChatListUpdateOne) Select(field string, fields ...string) *ChatListUpdateOne {
	cluo.fields = append([]string{field}, fields...)
	return cluo
}

// Save executes the query and returns the updated ChatList entity.
func (cluo *ChatListUpdateOne) Save(ctx context.Context) (*ChatList, error) {
	return withHooks(ctx, cluo.sqlSave, cluo.mutation, cluo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cluo *ChatListUpdateOne) SaveX(ctx context.Context) *ChatList {
	node, err := cluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cluo *ChatListUpdateOne) Exec(ctx context.Context) error {
	_, err := cluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cluo *ChatListUpdateOne) ExecX(ctx context.Context) {
	if err := cluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (cluo *ChatListUpdateOne) sqlSave(ctx context.Context) (_node *ChatList, err error) {
	_spec := sqlgraph.NewUpdateSpec(chatlist.Table, chatlist.Columns, sqlgraph.NewFieldSpec(chatlist.FieldID, field.TypeInt64))
	id, ok := cluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ChatList.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, chatlist.FieldID)
		for _, f := range fields {
			if !chatlist.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != chatlist.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cluo.mutation.UID(); ok {
		_spec.SetField(chatlist.FieldUID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.AddedUID(); ok {
		_spec.AddField(chatlist.FieldUID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.Channel(); ok {
		_spec.SetField(chatlist.FieldChannel, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.AddedChannel(); ok {
		_spec.AddField(chatlist.FieldChannel, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.ChatID(); ok {
		_spec.SetField(chatlist.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.AddedChatID(); ok {
		_spec.AddField(chatlist.FieldChatID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.MaxMsgID(); ok {
		_spec.SetField(chatlist.FieldMaxMsgID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.AddedMaxMsgID(); ok {
		_spec.AddField(chatlist.FieldMaxMsgID, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.Uts(); ok {
		_spec.SetField(chatlist.FieldUts, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.AddedUts(); ok {
		_spec.AddField(chatlist.FieldUts, field.TypeInt64, value)
	}
	if value, ok := cluo.mutation.GetType(); ok {
		_spec.SetField(chatlist.FieldType, field.TypeInt, value)
	}
	if value, ok := cluo.mutation.AddedType(); ok {
		_spec.AddField(chatlist.FieldType, field.TypeInt, value)
	}
	_node = &ChatList{config: cluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{chatlist.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cluo.mutation.done = true
	return _node, nil
}
