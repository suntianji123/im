// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/im/common/data/ent/msgbody"
)

// MsgBodyCreate is the builder for creating a MsgBody entity.
type MsgBodyCreate struct {
	config
	mutation *MsgBodyMutation
	hooks    []Hook
}

// SetBody sets the "body" field.
func (mbc *MsgBodyCreate) SetBody(s string) *MsgBodyCreate {
	mbc.mutation.SetBody(s)
	return mbc
}

// SetCts sets the "cts" field.
func (mbc *MsgBodyCreate) SetCts(i int64) *MsgBodyCreate {
	mbc.mutation.SetCts(i)
	return mbc
}

// SetID sets the "id" field.
func (mbc *MsgBodyCreate) SetID(i int64) *MsgBodyCreate {
	mbc.mutation.SetID(i)
	return mbc
}

// Mutation returns the MsgBodyMutation object of the builder.
func (mbc *MsgBodyCreate) Mutation() *MsgBodyMutation {
	return mbc.mutation
}

// Save creates the MsgBody in the database.
func (mbc *MsgBodyCreate) Save(ctx context.Context) (*MsgBody, error) {
	return withHooks(ctx, mbc.sqlSave, mbc.mutation, mbc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (mbc *MsgBodyCreate) SaveX(ctx context.Context) *MsgBody {
	v, err := mbc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbc *MsgBodyCreate) Exec(ctx context.Context) error {
	_, err := mbc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbc *MsgBodyCreate) ExecX(ctx context.Context) {
	if err := mbc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mbc *MsgBodyCreate) check() error {
	if _, ok := mbc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "MsgBody.body"`)}
	}
	if _, ok := mbc.mutation.Cts(); !ok {
		return &ValidationError{Name: "cts", err: errors.New(`ent: missing required field "MsgBody.cts"`)}
	}
	return nil
}

func (mbc *MsgBodyCreate) sqlSave(ctx context.Context) (*MsgBody, error) {
	if err := mbc.check(); err != nil {
		return nil, err
	}
	_node, _spec := mbc.createSpec()
	if err := sqlgraph.CreateNode(ctx, mbc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	mbc.mutation.id = &_node.ID
	mbc.mutation.done = true
	return _node, nil
}

func (mbc *MsgBodyCreate) createSpec() (*MsgBody, *sqlgraph.CreateSpec) {
	var (
		_node = &MsgBody{config: mbc.config}
		_spec = sqlgraph.NewCreateSpec(msgbody.Table, sqlgraph.NewFieldSpec(msgbody.FieldID, field.TypeInt64))
	)
	if id, ok := mbc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := mbc.mutation.Body(); ok {
		_spec.SetField(msgbody.FieldBody, field.TypeString, value)
		_node.Body = value
	}
	if value, ok := mbc.mutation.Cts(); ok {
		_spec.SetField(msgbody.FieldCts, field.TypeInt64, value)
		_node.Cts = value
	}
	return _node, _spec
}

// MsgBodyCreateBulk is the builder for creating many MsgBody entities in bulk.
type MsgBodyCreateBulk struct {
	config
	err      error
	builders []*MsgBodyCreate
}

// Save creates the MsgBody entities in the database.
func (mbcb *MsgBodyCreateBulk) Save(ctx context.Context) ([]*MsgBody, error) {
	if mbcb.err != nil {
		return nil, mbcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(mbcb.builders))
	nodes := make([]*MsgBody, len(mbcb.builders))
	mutators := make([]Mutator, len(mbcb.builders))
	for i := range mbcb.builders {
		func(i int, root context.Context) {
			builder := mbcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*MsgBodyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, mbcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, mbcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, mbcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (mbcb *MsgBodyCreateBulk) SaveX(ctx context.Context) []*MsgBody {
	v, err := mbcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (mbcb *MsgBodyCreateBulk) Exec(ctx context.Context) error {
	_, err := mbcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mbcb *MsgBodyCreateBulk) ExecX(ctx context.Context) {
	if err := mbcb.Exec(ctx); err != nil {
		panic(err)
	}
}
